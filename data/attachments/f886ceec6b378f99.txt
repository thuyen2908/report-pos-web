# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Create tickets >> Add the Open Discount amount for Discount item
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:260:3

# Error details

```
Error: locator.fill: Test timeout of 90000ms exceeded.
Call log:
  - waiting for locator('input#priceAmount')

    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:706:43)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:60
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:275:5
```

# Page snapshot

```yaml
- dialog "DISCOUNT MULTIPLE close":
  - heading "DISCOUNT MULTIPLE close" [level=2]:
    - text: DISCOUNT MULTIPLE
    - button "close"
  - separator
  - text: All Items
  - list:
    - listitem: Manicure S x 1 W Bella (Nails) 12:36 AM - Now $6.00
  - paragraph: Open Discount
  - text: Type Discount
  - combobox "Type Discount Amount": Amount
  - text: Discount (Flat Amount)
  - spinbutton "numerictextbox": "0.00"
  - button "Back Discount"
  - button "Add Value"
  - radiogroup:
    - radio "Employee Absorbs"
    - text: Employee Absorbs
    - radio "Owner Absorbs" [checked]
    - text: Owner Absorbs
    - radio "Percent"
    - text: Percent
  - button "Remove" [disabled]
  - button "Apply" [disabled]
- listbox "Type Discount":
  - option "Amount" [selected]
  - option "Percent"
```

# Test source

```ts
  606 |
  607 | Then(
  608 | 	'I should see the total price {string} visible',
  609 | 	async ({ page }, price: string) => {
  610 | 		await expect(page.locator('.xTicketItems__total .price')).toContainText(
  611 | 			price,
  612 | 		);
  613 | 	},
  614 | );
  615 |
  616 | Then(
  617 | 	'I should see the first type {string} in the gift card detail list',
  618 | 	async ({ page }, type: string) => {
  619 | 		const firstTypeCell = page
  620 | 			.locator('.MuiDataGrid-row')
  621 | 			.first()
  622 | 			.locator('.MuiDataGrid-cell[data-field="giftCardLogType"]');
  623 |
  624 | 		await expect(firstTypeCell).toHaveAttribute('title', type);
  625 | 	},
  626 | );
  627 |
  628 | Then(
  629 | 	'I should see the note {string} visible',
  630 | 	async ({ page }, note: string) =>
  631 | 		await expect(page.locator('.xTicketItems__note')).toContainText(note),
  632 | );
  633 |
  634 | Then(
  635 | 	'I should see the loyalty phone {string} visible',
  636 | 	async ({ page }, phone: string) => {
  637 | 		const loyaltyPhoneElement = page
  638 | 			.locator('.Bloyalty__phone')
  639 | 			.getByText(phone, { exact: true });
  640 |
  641 | 		await expect(loyaltyPhoneElement).toBeVisible();
  642 | 	},
  643 | );
  644 |
  645 | Then(
  646 | 	'I should see the first type {string} in the loyal detail list',
  647 | 	async ({ page }, type: string) => {
  648 | 		const firstTypeCell = page
  649 | 			.locator('.MuiDataGrid-row')
  650 | 			.first()
  651 | 			.locator('.MuiDataGrid-cell[data-field="type"]');
  652 |
  653 | 		await expect(firstTypeCell).toHaveAttribute('title', type);
  654 | 	},
  655 | );
  656 |
  657 | Then(
  658 | 	'I should see the title contain {string} visible',
  659 | 	async ({ page }, name: string) => {
  660 | 		const titleElement = page
  661 | 			.locator('.BalanceLayout__title span')
  662 | 			.getByText(name);
  663 |
  664 | 		await expect(titleElement).toBeVisible();
  665 | 		await expect(titleElement).toContainText(name);
  666 | 	},
  667 | );
  668 |
  669 | Then(
  670 | 	'I should see the {string} option is checked',
  671 | 	async ({ page }, name: string) => {
  672 | 		const radioButton = page.getByLabel(name);
  673 |
  674 | 		await expect(radioButton).toBeChecked();
  675 | 	},
  676 | );
  677 |
  678 | When('I select the discount {string}', async ({ page }, discount: string) => {
  679 | 	const discountElement = page
  680 | 		.locator('.MuiListItem-gutters')
  681 | 		.getByText(discount);
  682 | 	await expect(discountElement).toHaveText(discount);
  683 | 	await discountElement.click();
  684 | });
  685 |
  686 | When('I select the type {string} option', async ({ page }, type: string) => {
  687 | 	const typeElement = page.locator('.xFlex-select');
  688 | 	await typeElement.click();
  689 | 	await page.locator('#menu-typeDiscount').getByText(type).click();
  690 | });
  691 |
  692 | Then(
  693 | 	'I should see the discount type {string} visible',
  694 | 	async ({ page }, type: string) => {
  695 | 		const discountTypeElement = page
  696 | 			.locator('.MuiListItemText-primary')
  697 | 			.first()
  698 | 			.getByText(type);
  699 | 		await expect(discountTypeElement).toHaveText(type);
  700 | 	},
  701 | );
  702 |
  703 | When(
  704 | 	'I enter the discount amount {string}',
  705 | 	async ({ page }, amount: string) => {
> 706 | 		await page.locator('input#priceAmount').fill(amount);
      | 		                                        ^ Error: locator.fill: Test timeout of 90000ms exceeded.
  707 | 	},
  708 | );
  709 |
  710 | Then(
  711 | 	'I should see the {string} discount in my cart',
  712 | 	async ({ page }, discount: string) => {
  713 | 		const discountElement = page
  714 | 			.locator('.xTicketItems__discount--title')
  715 | 			.getByText(discount);
  716 | 		await expect(discountElement).toContainText(discount);
  717 | 	},
  718 | );
  719 |
  720 | Then(
  721 | 	'I should see the {string} absorption type in my cart',
  722 | 	async ({ page }, type: string) => {
  723 | 		const typeElement = page
  724 | 			.locator('.xTicketItems__discount--title')
  725 | 			.getByText(type);
  726 | 		await expect(typeElement).toContainText(type);
  727 | 	},
  728 | );
  729 |
  730 | Then(
  731 | 	'I should see discount {string} in my cart',
  732 | 	async ({ page }, amount: string) => {
  733 | 		const amountDiscount = page
  734 | 			.locator('.xTicketItems__discount--price')
  735 | 			.getByText(amount);
  736 | 		await expect(amountDiscount).toContainText(amount);
  737 | 	},
  738 | );
  739 |
  740 | When(
  741 | 	'I enter the discount percent {string}',
  742 | 	async ({ page }, percent: string) => {
  743 | 		await page.locator('#pricePercent').fill(percent);
  744 | 	},
  745 | );
  746 |
  747 | Then('I should see the discount ticket non-zero', async ({ page }) => {
  748 | 	const discountTicket = page.locator('ul.xCharge li.MuiListItem-root').nth(1);
  749 |
  750 | 	await expect(discountTicket).not.toContainText('0.00');
  751 | 	await expect(discountTicket).not.toHaveText('$0.00');
  752 | });
  753 |
  754 | Then(
  755 | 	'I should see the {string} category',
  756 | 	async ({ page }, category: string) => {
  757 | 		const categoryElement = page
  758 | 			.locator('button.MuiButtonBase-root')
  759 | 			.getByText(category, { exact: true });
  760 | 		await expect(categoryElement).toHaveText(category);
  761 | 	},
  762 | );
  763 |
  764 | When('I select the {string} category', async ({ page }, category: string) => {
  765 | 	const categoryElement = page
  766 | 		.locator('button.MuiButtonBase-root')
  767 | 		.getByText(category, { exact: true });
  768 | 	await expect(categoryElement).toHaveText(category);
  769 | 	await categoryElement.click();
  770 | });
  771 |
  772 | Then(
  773 | 	'I should see the number card {string} visible',
  774 | 	async ({ page }, number: string) => {
  775 | 		const numberElement = page.locator('.numberCard').getByText(number);
  776 | 		await expect(numberElement).toHaveText(number);
  777 | 	},
  778 | );
  779 |
  780 | When('I remove the tax', async ({ page }) => {
  781 | 	const deleteTax = page.locator(
  782 | 		'button:has(svg[data-testid="XDeleteBoldIcon"])',
  783 | 	);
  784 |
  785 | 	await expect(deleteTax).toBeVisible();
  786 | 	await deleteTax.click();
  787 | });
  788 |
  789 | Then('I should see the tax display {string}', async ({ page }, tax: string) => {
  790 | 	const taxAmount = page.locator('.xCharge__taxes');
  791 | 	await expect(taxAmount).toHaveText(tax);
  792 | });
  793 |
  794 | When('I select the reason {string}', async ({ page }, reason: string) => {
  795 | 	const reasonElement = page
  796 | 		.locator('.xVoid')
  797 | 		.getByText(reason, { exact: true });
  798 | 	await expect(reasonElement).toHaveText(reason);
  799 | 	await reasonElement.click();
  800 | });
  801 |
  802 | Then(
  803 | 	'I should see a second popup dialog with title {string}',
  804 | 	async ({ page }, dialogTitle: string) => {
  805 | 		const dialogTitleElement = page.locator('.MuiDialogTitle-root').last();
  806 |
```