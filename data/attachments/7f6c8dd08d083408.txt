# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Loyalty Balance >> Adjust Gift Card balance
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/loyalty.feature.spec.js:24:3

# Error details

```
Error: Timed out 20000ms waiting for expect(locator).toHaveAttribute(expected)

Locator: locator('.MuiDataGrid-row').first().locator('.MuiDataGrid-cell[data-field="type"]')
Expected string: "PosManualIssuance"
Received string: "Issuance"
Call log:
  - expect.toHaveAttribute with timeout 20000ms
  - waiting for locator('.MuiDataGrid-row').first().locator('.MuiDataGrid-cell[data-field="type"]')
    24 × locator resolved to <div tabindex="-1" role="gridcell" aria-colspan="1" title="Issuance" data-field="type" data-colindex="4" aria-colindex="5" class="MuiDataGrid-cell MuiDataGrid-cell--textLeft">Issuance</div>
       - unexpected value "Issuance"

    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:653:31)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:60
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/loyalty.feature.spec.js:35:5
```

# Page snapshot

```yaml
- banner:
  - img
  - list:
    - listitem: Timesheet
    - listitem: Check In
    - listitem: Tickets
    - listitem: Turn
    - listitem: Appointment
    - listitem: Quick Sale
    - listitem: Balance
  - text: Mar 20
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: "Customer: Tin"
  - searchbox "Search…"
  - grid:
    - 'row "Ticket # Date Time Points Type Reason"':
      - 'columnheader "Ticket #"'
      - columnheader "Date"
      - columnheader "Time"
      - columnheader "Points"
      - columnheader "Type"
      - columnheader "Reason"
    - progressbar:
      - img
    - rowgroup:
      - row "133 03/20/2025 07:30 AM 0 Issuance":
        - gridcell "133"
        - gridcell "03/20/2025"
        - gridcell "07:30 AM"
        - gridcell "0"
        - gridcell "Issuance"
        - gridcell
      - row "133 03/20/2025 07:30 AM (636) Redemption":
        - gridcell "133"
        - gridcell "03/20/2025"
        - gridcell "07:30 AM"
        - gridcell "(636)"
        - gridcell "Redemption"
        - gridcell
      - row "131 03/20/2025 06:53 AM 0 Issuance":
        - gridcell "131"
        - gridcell "03/20/2025"
        - gridcell "06:53 AM"
        - gridcell "0"
        - gridcell "Issuance"
        - gridcell
      - row "116 03/20/2025 06:47 AM (636) Redemption":
        - gridcell "116"
        - gridcell "03/20/2025"
        - gridcell "06:47 AM"
        - gridcell "(636)"
        - gridcell "Redemption"
        - gridcell
      - row "187 03/19/2025 07:49 PM (636) Redemption":
        - gridcell "187"
        - gridcell "03/19/2025"
        - gridcell "07:49 PM"
        - gridcell "(636)"
        - gridcell "Redemption"
        - gridcell
      - row "188 03/19/2025 07:49 PM 0 Issuance":
        - gridcell "188"
        - gridcell "03/19/2025"
        - gridcell "07:49 PM"
        - gridcell "0"
        - gridcell "Issuance"
        - gridcell
      - row "175 03/19/2025 07:48 PM (636) Redemption":
        - gridcell "175"
        - gridcell "03/19/2025"
        - gridcell "07:48 PM"
        - gridcell "(636)"
        - gridcell "Redemption"
        - gridcell
      - row "157 03/19/2025 11:41 AM 0 Issuance":
        - gridcell "157"
        - gridcell "03/19/2025"
        - gridcell "11:41 AM"
        - gridcell "0"
        - gridcell "Issuance"
        - gridcell
      - row "148 03/19/2025 11:41 AM (636) Redemption":
        - gridcell "148"
        - gridcell "03/19/2025"
        - gridcell "11:41 AM"
        - gridcell "(636)"
        - gridcell "Redemption"
        - gridcell
      - row "140 03/19/2025 08:48 AM 0 Issuance":
        - gridcell "140"
        - gridcell "03/19/2025"
        - gridcell "08:48 AM"
        - gridcell "0"
        - gridcell "Issuance"
        - gridcell
      - row "133 03/19/2025 08:47 AM (636) Redemption":
        - gridcell "133"
        - gridcell "03/19/2025"
        - gridcell "08:47 AM"
        - gridcell "(636)"
        - gridcell "Redemption"
        - gridcell
  - text: ACTIVITY SUMMARY
  - term: First Visit
  - definition: 03/18/2025
  - term: Last Visit
  - definition: 03/20/2025
  - term: VALUE
  - definition: $9,958.40
  - term: Last Used Points
  - definition: (636) pts
  - term: BALANCE
  - definition: 995840 pts
  - text: "CURRENTLY VIEWING Loyalty Phone Number: (999) 999-9999"
  - button "SEARCH ANOTHER"
  - text: ADJUST 700
  - textbox "Reason typing ..."
  - button "1"
  - button "2"
  - button "3"
  - button "4"
  - button "5"
  - button "6"
  - button "7"
  - button "8"
  - button "9"
  - button
  - button "0"
  - button
  - button "DECREASE"
  - button "INCREASE"
- alert
```

# Test source

```ts
  553 | 		await expect(paymentHistoryElement).toHaveText(paymentHistory);
  554 | 	},
  555 | );
  556 |
  557 | Then(
  558 | 	'I should see the number {string} visible',
  559 | 	async ({ page }, number: string) => {
  560 | 		const numberElement = page
  561 | 			.locator('.BalanceLayout__content--number')
  562 | 			.getByText(number, { exact: true });
  563 |
  564 | 		await expect(numberElement).toBeVisible();
  565 | 	},
  566 | );
  567 |
  568 | Then(
  569 | 	'I should see the payment price {string}',
  570 | 	async ({ page }, price: string) => {
  571 | 		const priceElement = page
  572 | 			.locator('.xPayment__history--price')
  573 | 			.getByText(price);
  574 | 		await expect(priceElement).toHaveText(price);
  575 | 	},
  576 | );
  577 |
  578 | When(
  579 | 	'I click on the total price of {string}',
  580 | 	async ({ page }, service: string) => {
  581 | 		const serviceContainer = page
  582 | 			.locator('.xTicketItems__info')
  583 | 			.filter({ has: page.locator('.itemName', { hasText: service }) });
  584 |
  585 | 		await serviceContainer.locator('.xTicketItems__total').click();
  586 | 	},
  587 | );
  588 |
  589 | When('I change the price to {string}', async ({ page }, price: string) => {
  590 | 	await page.locator('input#itemNumbers\\.amount').clear();
  591 | 	await page.locator('input#itemNumbers\\.amount').fill(price);
  592 | });
  593 |
  594 | When(
  595 | 	'I change the quantity to {string}',
  596 | 	async ({ page }, quantity: string) => {
  597 | 		await page.locator('input#itemNumbers\\.qty').clear();
  598 | 		await page.locator('input#itemNumbers\\.qty').fill(quantity);
  599 | 	},
  600 | );
  601 |
  602 | When('I enter a note {string}', async ({ page }, note: string) => {
  603 | 	await page.locator("[placeholder='Enter your note']").fill(note);
  604 | 	await page.getByRole('button', { name: 'Save' }).click();
  605 | });
  606 |
  607 | Then(
  608 | 	'I should see the total price {string} visible',
  609 | 	async ({ page }, price: string) => {
  610 | 		await expect(page.locator('.xTicketItems__total .price')).toContainText(
  611 | 			price,
  612 | 		);
  613 | 	},
  614 | );
  615 |
  616 | Then(
  617 | 	'I should see the first type {string} in the gift card detail list',
  618 | 	async ({ page }, type: string) => {
  619 | 		const firstTypeCell = page
  620 | 			.locator('.MuiDataGrid-row')
  621 | 			.first()
  622 | 			.locator('.MuiDataGrid-cell[data-field="giftCardLogType"]');
  623 |
  624 | 		await expect(firstTypeCell).toHaveAttribute('title', type);
  625 | 	},
  626 | );
  627 |
  628 | Then(
  629 | 	'I should see the note {string} visible',
  630 | 	async ({ page }, note: string) =>
  631 | 		await expect(page.locator('.xTicketItems__note')).toContainText(note),
  632 | );
  633 |
  634 | Then(
  635 | 	'I should see the loyalty phone {string} visible',
  636 | 	async ({ page }, phone: string) => {
  637 | 		const loyaltyPhoneElement = page
  638 | 			.locator('.Bloyalty__phone')
  639 | 			.getByText(phone, { exact: true });
  640 |
  641 | 		await expect(loyaltyPhoneElement).toBeVisible();
  642 | 	},
  643 | );
  644 |
  645 | Then(
  646 | 	'I should see the first type {string} in the loyal detail list',
  647 | 	async ({ page }, type: string) => {
  648 | 		const firstTypeCell = page
  649 | 			.locator('.MuiDataGrid-row')
  650 | 			.first()
  651 | 			.locator('.MuiDataGrid-cell[data-field="type"]');
  652 |
> 653 | 		await expect(firstTypeCell).toHaveAttribute('title', type);
      | 		                            ^ Error: Timed out 20000ms waiting for expect(locator).toHaveAttribute(expected)
  654 | 	},
  655 | );
  656 |
  657 | Then(
  658 | 	'I should see the title contain {string} visible',
  659 | 	async ({ page }, name: string) => {
  660 | 		const titleElement = page
  661 | 			.locator('.BalanceLayout__title span')
  662 | 			.getByText(name);
  663 |
  664 | 		await expect(titleElement).toBeVisible();
  665 | 		await expect(titleElement).toContainText(name);
  666 | 	},
  667 | );
  668 |
  669 | Then(
  670 | 	'I should see the {string} option is checked',
  671 | 	async ({ page }, name: string) => {
  672 | 		const radioButton = page.getByLabel(name);
  673 |
  674 | 		await expect(radioButton).toBeChecked();
  675 | 	},
  676 | );
  677 |
  678 | When('I select the discount {string}', async ({ page }, discount: string) => {
  679 | 	const discountElement = page
  680 | 		.locator('.MuiListItem-gutters')
  681 | 		.getByText(discount);
  682 | 	await expect(discountElement).toHaveText(discount);
  683 | 	await discountElement.click();
  684 | });
  685 |
  686 | When('I select the type {string} option', async ({ page }, type: string) => {
  687 | 	const typeElement = page.locator('.xFlex-select');
  688 | 	await typeElement.click();
  689 | 	await page.locator('#menu-typeDiscount').getByText(type).click();
  690 | });
  691 |
  692 | Then(
  693 | 	'I should see the discount type {string} visible',
  694 | 	async ({ page }, type: string) => {
  695 | 		const discountTypeElement = page
  696 | 			.locator('.MuiListItemText-primary')
  697 | 			.first()
  698 | 			.getByText(type);
  699 | 		await expect(discountTypeElement).toHaveText(type);
  700 | 	},
  701 | );
  702 |
  703 | When(
  704 | 	'I enter the discount amount {string}',
  705 | 	async ({ page }, amount: string) => {
  706 | 		await page.locator('input#priceAmount').fill(amount);
  707 | 	},
  708 | );
  709 |
  710 | Then(
  711 | 	'I should see the {string} discount in my cart',
  712 | 	async ({ page }, discount: string) => {
  713 | 		const discountElement = page
  714 | 			.locator('.xTicketItems__discount--title')
  715 | 			.getByText(discount);
  716 | 		await expect(discountElement).toContainText(discount);
  717 | 	},
  718 | );
  719 |
  720 | Then(
  721 | 	'I should see the {string} absorption type in my cart',
  722 | 	async ({ page }, type: string) => {
  723 | 		const typeElement = page
  724 | 			.locator('.xTicketItems__discount--title')
  725 | 			.getByText(type);
  726 | 		await expect(typeElement).toContainText(type);
  727 | 	},
  728 | );
  729 |
  730 | Then(
  731 | 	'I should see discount {string} in my cart',
  732 | 	async ({ page }, amount: string) => {
  733 | 		const amountDiscount = page
  734 | 			.locator('.xTicketItems__discount--price')
  735 | 			.getByText(amount);
  736 | 		await expect(amountDiscount).toContainText(amount);
  737 | 	},
  738 | );
  739 |
  740 | When(
  741 | 	'I enter the discount percent {string}',
  742 | 	async ({ page }, percent: string) => {
  743 | 		await page.locator('#pricePercent').fill(percent);
  744 | 	},
  745 | );
  746 |
  747 | Then('I should see the discount ticket non-zero', async ({ page }) => {
  748 | 	const discountTicket = page.locator('ul.xCharge li.MuiListItem-root').nth(1);
  749 |
  750 | 	await expect(discountTicket).not.toContainText('0.00');
  751 | 	await expect(discountTicket).not.toHaveText('$0.00');
  752 | });
  753 |
```