# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Refund >> Create a refund ticket and pay with Cash
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/refund.feature.spec.js:6:3

# Error details

```
Error: Timed out 30000ms waiting for expect(locator).toBeVisible()

Locator: locator('.MuiDialogTitle-root')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 30000ms
  - waiting for locator('.MuiDialogTitle-root')

    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:112:36)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:60
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/refund.feature.spec.js:11:5
```

# Page snapshot

```yaml
- banner:
  - img
  - list:
    - listitem: Timesheet
    - listitem: Check In
    - listitem: Tickets
    - listitem: Turn
    - listitem: Appointment
    - listitem: Quick Sale
    - listitem: Balance
  - text: Mar 26
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: CHECK-INS No Customer
  - tablist:
    - tab "NAILS" [selected]
    - tab "HAIR"
  - tabpanel:
    - list:
      - listitem: "D #1 Daisy 12:40 AM Turn: 0.0"
      - listitem: "S #2 Sandy 07:00 AM Turn: 0.0"
      - listitem:
        - img "item service Emily"
        - text: "#3 Emily 07:00 AM Turn: 0.0"
      - listitem: "T #4 Tom 07:00 AM Turn: 0.0"
      - listitem: "B #5 Bella 07:00 AM Turn: 0.0"
      - listitem: "R #6 Ruby 07:00 AM Turn: 0.0"
      - listitem: "C #7 Chloe 12:35 AM Turn: 0.0"
      - listitem: "A #8 Angie 12:37 AM Turn: 0.0"
      - listitem: "S #9 Samantha 12:38 AM Turn: 0.0"
      - listitem:
        - img "item service Emma"
        - text: "#10 Emma 07:00 AM Turn: 0.0"
      - listitem: "J #11 Jack 07:00 AM Turn: 0.0"
      - listitem: "H #12 Hanna 07:00 AM Turn: 0.0"
      - listitem: "D #13 Dylan 07:00 AM Turn: 0.0"
      - listitem: "L #14 Laura 07:00 AM Turn: 0.0"
      - listitem: "D #15 Daniel 12:38 AM Turn: 1.0"
      - listitem: "C #16 Christ 07:00 AM Turn: 1.0"
      - listitem: "T #17 Tim 07:00 AM Turn: 1.0"
      - listitem: "T #18 Tina 07:00 AM Turn: 1.0"
      - listitem: "B #19 Brian 07:00 AM Turn: 1.0"
      - listitem: "S #20 Sarah 07:00 AM Turn: 1.0"
      - listitem:
        - img "item service Owner"
        - text: "#21 Owner 12:01 AM Turn: 1.0"
      - listitem: "M #22 Maya 07:00 AM Turn: 1.0"
      - listitem: "E #23 Evelyn 12:41 AM Turn: 1.0"
      - listitem: "J #24 Julia 12:40 AM Turn: 2.0"
      - listitem: "K #25 Kelley 07:00 AM Turn: 2.0"
      - listitem: "H #26 Harry 07:00 AM Turn: 3.0"
      - listitem: "S #27 Sam 07:00 AM Turn: 3.0"
      - listitem: "S #28 Sophia 07:00 AM Turn: 5.0"
      - listitem: "L #29 Lisa 07:00 AM Turn: 7.0"
      - listitem: "E #30 Ethan 07:00 AM Turn: 7.0"
      - listitem: "K #31 Kim 07:00 AM Turn: 8.0"
      - listitem: "M #32 Mia 12:36 AM Turn: 14.0"
      - listitem: "A #33 Anna 07:00 AM Turn: 15.0"
  - button "search"
  - list:
    - listitem:
      - button "Ready"
    - listitem:
      - button "In Service"
    - listitem:
      - button "Paid"
    - listitem:
      - button "All" [disabled]
  - text: No Ticket Found.
- alert
```

# Test source

```ts
   12 | 		const pageUrl = constants.PageUrl[pageId];
   13 |
   14 | 		await page.waitForURL(pageUrl);
   15 | 		await expect(page).toHaveURL(pageUrl);
   16 | 	},
   17 | );
   18 |
   19 | Then(
   20 | 	'I should see the employee {string} in the employee list',
   21 | 	async ({ page }, employeeName: string) => {
   22 | 		const employeeList = page.locator('div.xQueueList');
   23 |
   24 | 		await expect(
   25 | 			employeeList.getByText(employeeName, { exact: true }),
   26 | 		).toBeVisible();
   27 | 	},
   28 | );
   29 |
   30 | Then(
   31 | 	'I should see the {string} screen',
   32 | 	async ({ page }, screenName: string) => {
   33 | 		const screenTitle = page
   34 | 			.locator('p.MuiTypography-body1.pageName')
   35 | 			.getByText(screenName, { exact: true });
   36 |
   37 | 		await expect(screenTitle).toBeVisible();
   38 | 	},
   39 | );
   40 |
   41 | Then(
   42 | 	'I should see the {string} service',
   43 | 	async ({ page }, serviceName: string) => {
   44 | 		const service = page
   45 | 			.locator('li.ItemService')
   46 | 			.getByText(serviceName, { exact: true });
   47 | 		await expect(service).toBeVisible();
   48 | 	},
   49 | );
   50 |
   51 | When(
   52 | 	'I add the {string} service to my cart',
   53 | 	async ({ page }, serviceName: string) => {
   54 | 		const service = page
   55 | 			.locator('li.ItemService')
   56 | 			.getByText(serviceName, { exact: true });
   57 |
   58 | 		await service.click();
   59 | 	},
   60 | );
   61 |
   62 | Then(
   63 | 	'I should see my cart showing {int} item added',
   64 | 	async ({ page }, itemCount: number) => {
   65 | 		const itemCountElement = page.locator(
   66 | 			'svg[data-testid="LocalPrintshopIcon"] + span',
   67 | 		);
   68 |
   69 | 		await expect(itemCountElement).toBeVisible();
   70 |
   71 | 		expect(itemCountElement).toHaveText(itemCount.toString());
   72 | 	},
   73 | );
   74 |
   75 | When('I click on the {string} button', async ({ page }, buttonText: string) => {
   76 | 	const button = page.getByRole('button', { name: buttonText });
   77 | 	await expect(button).toBeVisible();
   78 |
   79 | 	await button.click();
   80 | });
   81 |
   82 | Then(
   83 | 	'I should see the text {string} visible',
   84 | 	async ({ page }, text: string) => {
   85 | 		await expect(page.getByText(text, { exact: true })).toBeVisible();
   86 | 	},
   87 | );
   88 |
   89 | Then(
   90 | 	'I should see the button with id {string} visible',
   91 | 	async ({ page }, buttonId: string) => {
   92 | 		await expect(page.locator(`button#${buttonId}`)).toBeVisible();
   93 | 	},
   94 | );
   95 |
   96 | When(
   97 | 	'I click on the element with id {string}',
   98 | 	async ({ page }, elementId: string) => {
   99 | 		const element = page.locator(`#${elementId}`);
  100 |
  101 | 		await expect(element).toBeVisible();
  102 |
  103 | 		await element.click();
  104 | 	},
  105 | );
  106 |
  107 | Then(
  108 | 	'I should see a popup dialog with title {string}',
  109 | 	async ({ page }, dialogTitle: string) => {
  110 | 		const dialogTitleElement = page.locator('.MuiDialogTitle-root');
  111 |
> 112 | 		await expect(dialogTitleElement).toBeVisible();
      | 		                                 ^ Error: Timed out 30000ms waiting for expect(locator).toBeVisible()
  113 | 		await expect(dialogTitleElement).toHaveText(dialogTitle);
  114 | 	},
  115 | );
  116 |
  117 | Then(
  118 | 	'I should see a popup dialog with content {string}',
  119 | 	async ({ page }, content: string) => {
  120 | 		const dialogContentElement = page.locator('.MuiDialogContent-root');
  121 |
  122 | 		await expect(dialogContentElement).toBeVisible();
  123 | 		await expect(dialogContentElement).toHaveText(content);
  124 | 	},
  125 | );
  126 |
  127 | When(
  128 | 	'I click on the {string} button in the popup dialog',
  129 | 	async ({ page }, buttonText: string) => {
  130 | 		const dialog = page.locator('div[role="dialog"]');
  131 |
  132 | 		const button = dialog.getByRole('button', {
  133 | 			name: buttonText,
  134 | 			exact: true,
  135 | 		});
  136 | 		await expect(button).toBeVisible();
  137 |
  138 | 		await button.click();
  139 | 	},
  140 | );
  141 |
  142 | Then('I should see the tax amount non-zero', async ({ page }) => {
  143 | 	const chargeTax = page.locator('.xCharge__taxes');
  144 |
  145 | 	await expect(chargeTax).not.toContainText('0.00');
  146 | 	await expect(chargeTax).not.toHaveText('$0.00');
  147 | });
  148 |
  149 | When(
  150 | 	'I select the {string} payment type',
  151 | 	async ({ page }, paymentType: string) => {
  152 | 		const paymentTypeButton = page
  153 | 			.locator('.xPayment__type')
  154 | 			.getByText(paymentType, { exact: true });
  155 | 		await expect(paymentTypeButton).toBeVisible();
  156 |
  157 | 		await paymentTypeButton.click();
  158 | 	},
  159 | );
  160 |
  161 | When('I click on the item {string} button', async ({ page }, item: string) => {
  162 | 	const itemButton = page.locator('.xMultiple').getByText(item);
  163 | 	await expect(itemButton).toBeVisible();
  164 |
  165 | 	await itemButton.click();
  166 | });
  167 |
  168 | When(
  169 | 	'I select the {string} service in the dialog',
  170 | 	async ({ page }, service: string) => {
  171 | 		const serviceButton = page
  172 | 			.locator('div.xMultiple__wrap')
  173 | 			.locator('li.xTicketItems')
  174 | 			.getByText(service, { exact: true });
  175 | 		await expect(serviceButton).toBeVisible();
  176 |
  177 | 		await serviceButton.click();
  178 | 	},
  179 | );
  180 |
  181 | When(
  182 | 	'I select the {string} employee in the dialog',
  183 | 	async ({ page }, employee: string) => {
  184 | 		const employeeButton = page
  185 | 			.locator('.xEmployeeItem')
  186 | 			.getByText(employee, { exact: true });
  187 | 		await expect(employeeButton).toBeVisible();
  188 |
  189 | 		await employeeButton.click();
  190 | 	},
  191 | );
  192 |
  193 | When(
  194 | 	'I click on the {string} button in the dialog',
  195 | 	async ({ page }, button: string) => {
  196 | 		const buttonElement = page
  197 | 			.locator('.xMultiple__wrap')
  198 | 			.getByRole('button', { name: button });
  199 |
  200 | 		await expect(buttonElement).toBeVisible();
  201 |
  202 | 		await buttonElement.click();
  203 | 	},
  204 | );
  205 |
  206 | Then(
  207 | 	'I should see the {string} employee in my cart',
  208 | 	async ({ page }, employee: string) => {
  209 | 		const employeeElement = page
  210 | 			.locator('ul.xTicketItemList')
  211 | 			.getByText(employee);
  212 | 		await expect(employeeElement).toContainText(employee);
```