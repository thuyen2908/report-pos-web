# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Gift Card Balance >> Adjust Gift Card balance
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/gift-card.feature.spec.js:23:3

# Error details

```
Error: Timed out 20000ms waiting for expect(locator).toHaveAttribute(expected)

Locator: locator('.MuiDataGrid-row').first().locator('.MuiDataGrid-cell[data-field="giftCardLogType"]')
Expected string: "PosManualAdjust"
Received string: "ActivateAddOn"
Call log:
  - expect.toHaveAttribute with timeout 20000ms
  - waiting for locator('.MuiDataGrid-row').first().locator('.MuiDataGrid-cell[data-field="giftCardLogType"]')
    24 × locator resolved to <div tabindex="-1" role="gridcell" aria-colspan="1" data-colindex="4" aria-colindex="5" title="ActivateAddOn" data-field="giftCardLogType" class="MuiDataGrid-cell MuiDataGrid-cell--textLeft">ActivateAddOn</div>
       - unexpected value "ActivateAddOn"

    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:624:31)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:60
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/gift-card.feature.spec.js:36:5
```

# Page snapshot

```yaml
- banner:
  - img
  - list:
    - listitem: Timesheet
    - listitem: Check In
    - listitem: Tickets
    - listitem: Turn
    - listitem: Appointment
    - listitem: Quick Sale
    - listitem: Balance
  - text: Mar 20
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: DETAILS
  - searchbox "Search…"
  - grid:
    - 'row "Ticket # Date Time Amount Type Reason"':
      - 'columnheader "Ticket #"'
      - columnheader "Date"
      - columnheader "Time"
      - columnheader "Amount"
      - columnheader "Type"
      - columnheader "Reason"
    - rowgroup:
      - row "257 03/20/2025 08:33 AM $100.00 ActivateAddOn":
        - gridcell "257"
        - gridcell "03/20/2025"
        - gridcell "08:33 AM"
        - gridcell "$100.00"
        - gridcell "ActivateAddOn"
        - gridcell
      - row "0 03/20/2025 08:32 AM $5.00 PosManualAdjust":
        - gridcell "0"
        - gridcell "03/20/2025"
        - gridcell "08:32 AM"
        - gridcell "$5.00"
        - gridcell "PosManualAdjust"
        - gridcell
      - row "235 03/20/2025 08:21 AM $100.00 ActivateAddOn":
        - gridcell "235"
        - gridcell "03/20/2025"
        - gridcell "08:21 AM"
        - gridcell "$100.00"
        - gridcell "ActivateAddOn"
        - gridcell
      - row "0 03/20/2025 08:19 AM $5.00 PosManualAdjust":
        - gridcell "0"
        - gridcell "03/20/2025"
        - gridcell "08:19 AM"
        - gridcell "$5.00"
        - gridcell "PosManualAdjust"
        - gridcell
      - row "0 03/20/2025 08:06 AM $5.00 PosManualAdjust":
        - gridcell "0"
        - gridcell "03/20/2025"
        - gridcell "08:06 AM"
        - gridcell "$5.00"
        - gridcell "PosManualAdjust"
        - gridcell
      - row "182 03/20/2025 07:51 AM $100.00 ActivateAddOn":
        - gridcell "182"
        - gridcell "03/20/2025"
        - gridcell "07:51 AM"
        - gridcell "$100.00"
        - gridcell "ActivateAddOn"
        - gridcell
      - row "0 03/20/2025 07:48 AM $5.00 PosManualAdjust":
        - gridcell "0"
        - gridcell "03/20/2025"
        - gridcell "07:48 AM"
        - gridcell "$5.00"
        - gridcell "PosManualAdjust"
        - gridcell
      - row "149 03/20/2025 07:33 AM $100.00 ActivateAddOn":
        - gridcell "149"
        - gridcell "03/20/2025"
        - gridcell "07:33 AM"
        - gridcell "$100.00"
        - gridcell "ActivateAddOn"
        - gridcell
      - row "0 03/20/2025 07:31 AM $5.00 PosManualAdjust":
        - gridcell "0"
        - gridcell "03/20/2025"
        - gridcell "07:31 AM"
        - gridcell "$5.00"
        - gridcell "PosManualAdjust"
        - gridcell
      - row "115 03/20/2025 06:47 AM $100.00 ActivateAddOn":
        - gridcell "115"
        - gridcell "03/20/2025"
        - gridcell "06:47 AM"
        - gridcell "$100.00"
        - gridcell "ActivateAddOn"
        - gridcell
      - row "174 03/19/2025 07:48 PM $100.00 ActivateAddOn":
        - gridcell "174"
        - gridcell "03/19/2025"
        - gridcell "07:48 PM"
        - gridcell "$100.00"
        - gridcell "ActivateAddOn"
        - gridcell
  - text: ACTIVITY SUMMARY
  - button
  - term: ACTIVATED DATE
  - definition: 02/18/2025
  - term: ORIGINAL VALUE
  - definition: $1,600.00
  - term: LAST REDEEMED DATE
  - definition: N/A
  - term: LAST REDEEMED AMT
  - definition: $0.00
  - term: BALANCE
  - definition: $1,700.00
  - text: "CURRENTLY VIEWING Gift Card 1234 Value: $1,600.00 Balance: $1,700.00"
  - button "SEARCH ANOTHER"
  - text: ADJUST 5.00
  - textbox "Reason typing ..."
  - button "1"
  - button "2"
  - button "3"
  - button "4"
  - button "5"
  - button "6"
  - button "7"
  - button "8"
  - button "9"
  - button
  - button "0"
  - button
  - button "DECREASE"
  - button "INCREASE"
- alert
```

# Test source

```ts
  524 | 		await page
  525 | 			.locator(`button.key:has(span.text-num:has-text("${digit}"))`)
  526 | 			.click();
  527 | 	}
  528 | });
  529 |
  530 | Then(
  531 | 	'I should see the gift number {string} visible',
  532 | 	async ({ page }, number: string) => {
  533 | 		const giftNumberElement = page
  534 | 			.locator('.giftCard__content')
  535 | 			.getByText(number, { exact: true });
  536 |
  537 | 		await expect(giftNumberElement).toBeVisible();
  538 | 	},
  539 | );
  540 |
  541 | When('I select the title {string}', async ({ page }, name: string) => {
  542 | 	const nameElement = page.locator('.xPayment__card--input').getByText(name);
  543 | 	await expect(nameElement).toContainText(name);
  544 | 	await nameElement.click();
  545 | });
  546 |
  547 | Then(
  548 | 	'I should see the payment history {string} visible',
  549 | 	async ({ page }, paymentHistory: string) => {
  550 | 		const paymentHistoryElement = page
  551 | 			.locator('.xPayment__history--nameType')
  552 | 			.getByText(paymentHistory);
  553 | 		await expect(paymentHistoryElement).toHaveText(paymentHistory);
  554 | 	},
  555 | );
  556 |
  557 | Then(
  558 | 	'I should see the number {string} visible',
  559 | 	async ({ page }, number: string) => {
  560 | 		const numberElement = page
  561 | 			.locator('.BalanceLayout__content--number')
  562 | 			.getByText(number, { exact: true });
  563 |
  564 | 		await expect(numberElement).toBeVisible();
  565 | 	},
  566 | );
  567 |
  568 | Then(
  569 | 	'I should see the payment price {string}',
  570 | 	async ({ page }, price: string) => {
  571 | 		const priceElement = page
  572 | 			.locator('.xPayment__history--price')
  573 | 			.getByText(price);
  574 | 		await expect(priceElement).toHaveText(price);
  575 | 	},
  576 | );
  577 |
  578 | When(
  579 | 	'I click on the total price of {string}',
  580 | 	async ({ page }, service: string) => {
  581 | 		const serviceContainer = page
  582 | 			.locator('.xTicketItems__info')
  583 | 			.filter({ has: page.locator('.itemName', { hasText: service }) });
  584 |
  585 | 		await serviceContainer.locator('.xTicketItems__total').click();
  586 | 	},
  587 | );
  588 |
  589 | When('I change the price to {string}', async ({ page }, price: string) => {
  590 | 	await page.locator('input#itemNumbers\\.amount').clear();
  591 | 	await page.locator('input#itemNumbers\\.amount').fill(price);
  592 | });
  593 |
  594 | When(
  595 | 	'I change the quantity to {string}',
  596 | 	async ({ page }, quantity: string) => {
  597 | 		await page.locator('input#itemNumbers\\.qty').clear();
  598 | 		await page.locator('input#itemNumbers\\.qty').fill(quantity);
  599 | 	},
  600 | );
  601 |
  602 | When('I enter a note {string}', async ({ page }, note: string) => {
  603 | 	await page.locator("[placeholder='Enter your note']").fill(note);
  604 | 	await page.getByRole('button', { name: 'Save' }).click();
  605 | });
  606 |
  607 | Then(
  608 | 	'I should see the total price {string} visible',
  609 | 	async ({ page }, price: string) => {
  610 | 		await expect(page.locator('.xTicketItems__total .price')).toContainText(
  611 | 			price,
  612 | 		);
  613 | 	},
  614 | );
  615 |
  616 | Then(
  617 | 	'I should see the first type {string} in the gift card detail list',
  618 | 	async ({ page }, type: string) => {
  619 | 		const firstTypeCell = page
  620 | 			.locator('.MuiDataGrid-row')
  621 | 			.first()
  622 | 			.locator('.MuiDataGrid-cell[data-field="giftCardLogType"]');
  623 |
> 624 | 		await expect(firstTypeCell).toHaveAttribute('title', type);
      | 		                            ^ Error: Timed out 20000ms waiting for expect(locator).toHaveAttribute(expected)
  625 | 	},
  626 | );
  627 |
  628 | Then(
  629 | 	'I should see the note {string} visible',
  630 | 	async ({ page }, note: string) =>
  631 | 		await expect(page.locator('.xTicketItems__note')).toContainText(note),
  632 | );
  633 |
  634 | Then(
  635 | 	'I should see the loyalty phone {string} visible',
  636 | 	async ({ page }, phone: string) => {
  637 | 		const loyaltyPhoneElement = page
  638 | 			.locator('.Bloyalty__phone')
  639 | 			.getByText(phone, { exact: true });
  640 |
  641 | 		await expect(loyaltyPhoneElement).toBeVisible();
  642 | 	},
  643 | );
  644 |
  645 | Then(
  646 | 	'I should see the first type {string} in the loyal detail list',
  647 | 	async ({ page }, type: string) => {
  648 | 		const firstTypeCell = page
  649 | 			.locator('.MuiDataGrid-row')
  650 | 			.first()
  651 | 			.locator('.MuiDataGrid-cell[data-field="type"]');
  652 |
  653 | 		await expect(firstTypeCell).toHaveAttribute('title', type);
  654 | 	},
  655 | );
  656 |
  657 | Then(
  658 | 	'I should see the title contain {string} visible',
  659 | 	async ({ page }, name: string) => {
  660 | 		const titleElement = page
  661 | 			.locator('.BalanceLayout__title span')
  662 | 			.getByText(name);
  663 |
  664 | 		await expect(titleElement).toBeVisible();
  665 | 		await expect(titleElement).toContainText(name);
  666 | 	},
  667 | );
  668 |
  669 | Then(
  670 | 	'I should see the {string} option is checked',
  671 | 	async ({ page }, name: string) => {
  672 | 		const radioButton = page.getByLabel(name);
  673 |
  674 | 		await expect(radioButton).toBeChecked();
  675 | 	},
  676 | );
  677 |
  678 | When('I select the discount {string}', async ({ page }, discount: string) => {
  679 | 	const discountElement = page
  680 | 		.locator('.MuiListItem-gutters')
  681 | 		.getByText(discount);
  682 | 	await expect(discountElement).toHaveText(discount);
  683 | 	await discountElement.click();
  684 | });
  685 |
  686 | When('I select the type {string} option', async ({ page }, type: string) => {
  687 | 	const typeElement = page.locator('.xFlex-select');
  688 | 	await typeElement.click();
  689 | 	await page.locator('#menu-typeDiscount').getByText(type).click();
  690 | });
  691 |
  692 | Then(
  693 | 	'I should see the discount type {string} visible',
  694 | 	async ({ page }, type: string) => {
  695 | 		const discountTypeElement = page
  696 | 			.locator('.MuiListItemText-primary')
  697 | 			.first()
  698 | 			.getByText(type);
  699 | 		await expect(discountTypeElement).toHaveText(type);
  700 | 	},
  701 | );
  702 |
  703 | When(
  704 | 	'I enter the discount amount {string}',
  705 | 	async ({ page }, amount: string) => {
  706 | 		await page.locator('input#priceAmount').fill(amount);
  707 | 	},
  708 | );
  709 |
  710 | Then(
  711 | 	'I should see the {string} discount in my cart',
  712 | 	async ({ page }, discount: string) => {
  713 | 		const discountElement = page
  714 | 			.locator('.xTicketItems__discount--title')
  715 | 			.getByText(discount);
  716 | 		await expect(discountElement).toContainText(discount);
  717 | 	},
  718 | );
  719 |
  720 | Then(
  721 | 	'I should see the {string} absorption type in my cart',
  722 | 	async ({ page }, type: string) => {
  723 | 		const typeElement = page
  724 | 			.locator('.xTicketItems__discount--title')
```