# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Create tickets >> Void the item when creating a ticket
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:462:3

# Error details

```
Error: Timed out 30000ms waiting for expect(locator).toBeVisible()

Locator: locator('div.MuiAlert-message').getByText('clocked in successfully').or(locator('div.MuiAlert-message').getByText('has clocked in'))
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 30000ms
  - waiting for locator('div.MuiAlert-message').getByText('clocked in successfully').or(locator('div.MuiAlert-message').getByText('has clocked in'))

    at HomePage.clockInTimesheet (/home/circleci/project/e2e/pos-web/src/steps/x.page.ts:285:5)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:22
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:464:5
```

# Page snapshot

```yaml
- dialog "PASSWORD close":
  - heading "PASSWORD close" [level=2]:
    - text: PASSWORD
    - button "close"
  - separator
  - text: "* * * *"
  - button "1"
  - button "2"
  - button "3"
  - button "4"
  - button "5"
  - button "6"
  - button "7"
  - button "8"
  - button "9"
  - button
  - button "0"
  - button
  - button "CONFIRM"
```

# Test source

```ts
  185 | 	/**
  186 | 	 * Wait for the page fully loaded
  187 | 	 */
  188 | 	@When('I wait for the page fully loaded')
  189 | 	public waitForNetworkIdle() {
  190 | 		return this.page.waitForLoadState('networkidle');
  191 | 	}
  192 |
  193 | 	/**
  194 | 	 * Select an item in the Navigation Bar
  195 | 	 *
  196 | 	 * @param navPath - The path to the navigation item, could be a single item or a path to a nested item, separated by " > ".
  197 | 	 *   For example: "Quick Sale", "Timesheet > Clock In", "Timesheet > Clock Out"
  198 | 	 */
  199 | 	@When('I navigate to {string} on the navigation bar')
  200 | 	public async selectNavItem(navPath: string) {
  201 | 		const { locators } = this;
  202 |
  203 | 		// wait for the menu bar ready
  204 | 		await this.waitForNetworkIdle();
  205 |
  206 | 		const navItems = navPath.split(' > ');
  207 | 		for (const navItem of navItems) {
  208 | 			await locators.navItem(navItem).click();
  209 | 		}
  210 | 	}
  211 |
  212 | 	/**
  213 | 	 * Click on an element inside the content section of the opening dialog
  214 | 	 */
  215 | 	@When(
  216 | 		'I click on the {string} text inside the content section of the opening dialog',
  217 | 	)
  218 | 	public async clickOnContentElementInsideOpeningDialog(text: string) {
  219 | 		const { locators } = this;
  220 |
  221 | 		const dialog = locators.dialog();
  222 | 		const dialogContent = locators.dialogContent(dialog);
  223 |
  224 | 		await dialogContent.getByText(text, { exact: true }).click();
  225 | 	}
  226 |
  227 | 	/**
  228 | 	 * Click on Action Buttons of the opening dialog, ex: "CONFIRM", "CANCEL",...
  229 | 	 */
  230 | 	@When('I click on the action button {string} of the opening dialog')
  231 | 	public async clickOnActionButtonOfOpeningDialog(buttonText: string) {
  232 | 		const { locators } = this;
  233 |
  234 | 		const dialog = locators.dialog();
  235 | 		const actionButton = locators.dialogActionButton(dialog, buttonText);
  236 |
  237 | 		await actionButton.click();
  238 | 	}
  239 |
  240 | 	/**
  241 | 	 * Close the opening dialog if it's visible
  242 | 	 */
  243 | 	@When('I close the opening dialog')
  244 | 	public async closeOpeningDialog() {
  245 | 		const { locators } = this;
  246 |
  247 | 		const dialog = locators.dialog();
  248 | 		const closeButton = locators.dialogCloseButton(dialog);
  249 |
  250 | 		await closeButton.click();
  251 | 	}
  252 |
  253 | 	/**
  254 | 	 * Clock In/Out Timesheet with provided PIN
  255 | 	 */
  256 | 	@When('I clock {timesheetAction} the timesheet with PIN {string}')
  257 | 	public async clockInTimesheet(timesheetAction: TimesheetAction, PIN: string) {
  258 | 		const { locators } = this;
  259 |
  260 | 		// find and click on the Clock In / Out button
  261 | 		const clockInOutNavigationPath =
  262 | 			timesheetAction === 'in'
  263 | 				? 'Timesheet > Clock In'
  264 | 				: 'Timesheet > Clock Out';
  265 | 		await this.selectNavItem(clockInOutNavigationPath);
  266 |
  267 | 		// expect the enter password dialog to be visible
  268 | 		const enterPasswordDialog = locators.dialog('PASSWORD');
  269 | 		await expect(enterPasswordDialog).toBeVisible();
  270 |
  271 | 		// enter the PIN
  272 | 		await this.enterPIN(PIN, enterPasswordDialog);
  273 |
  274 | 		// click confirm action button
  275 | 		await this.clickOnActionButtonOfOpeningDialog('CONFIRM');
  276 |
  277 | 		const successfullyClockedInToast = locators.toast.getByText(
  278 | 			'clocked in successfully',
  279 | 		); // in case of new session
  280 | 		const alreadyClockedInToast = locators.toast.getByText('has clocked in'); // in case there's an existing session
  281 |
  282 | 		// expect a toast message indicating the result of the operation
  283 | 		await expect(
  284 | 			successfullyClockedInToast.or(alreadyClockedInToast),
> 285 | 		).toBeVisible();
      | 		  ^ Error: Timed out 30000ms waiting for expect(locator).toBeVisible()
  286 |
  287 | 		// if the dialog is still visible, close it
  288 | 		if (await enterPasswordDialog.isVisible()) await this.closeOpeningDialog();
  289 | 	}
  290 | }
  291 |
```