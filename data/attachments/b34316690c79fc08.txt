# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Gift Card Balance >> Search Gift Card
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/gift-card.feature.spec.js:6:3

# Error details

```
Error: Timed out 20000ms waiting for expect(locator).toBeVisible()

Locator: getByText('DETAILS', { exact: true })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 20000ms
  - waiting for getByText('DETAILS', { exact: true })

    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:85:55)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:60
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/gift-card.feature.spec.js:17:5
```

# Page snapshot

```yaml
- banner:
  - img
  - list:
    - listitem: Timesheet
    - listitem: Check In
    - listitem: Tickets
    - listitem: Turn
    - listitem: Appointment
    - listitem: Quick Sale
    - listitem: Balance
  - text: Mar 21
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: DETAILS
  - searchbox "Searchâ€¦"
  - grid:
    - 'row "Ticket # Date Time Amount Type Reason"':
      - 'columnheader "Ticket #"'
      - columnheader "Date"
      - columnheader "Time"
      - columnheader "Amount"
      - columnheader "Type"
      - columnheader "Reason"
    - rowgroup:
      - row "373 03/20/2025 07:50 PM $100.00 ActivateOverwrite":
        - gridcell "373"
        - gridcell "03/20/2025"
        - gridcell "07:50 PM"
        - gridcell "$100.00"
        - gridcell "ActivateOverwrite"
        - gridcell
      - row "373 03/20/2025 07:50 PM ($100.00) OverwriteAdjust":
        - gridcell "373"
        - gridcell "03/20/2025"
        - gridcell "07:50 PM"
        - gridcell "($100.00)"
        - gridcell "OverwriteAdjust"
        - gridcell
      - row "337 03/20/2025 06:26 PM $100.00 ActivateOverwrite":
        - gridcell "337"
        - gridcell "03/20/2025"
        - gridcell "06:26 PM"
        - gridcell "$100.00"
        - gridcell "ActivateOverwrite"
        - gridcell
      - row "337 03/20/2025 06:26 PM ($100.00) OverwriteAdjust":
        - gridcell "337"
        - gridcell "03/20/2025"
        - gridcell "06:26 PM"
        - gridcell "($100.00)"
        - gridcell "OverwriteAdjust"
        - gridcell
      - row "311 03/20/2025 06:13 PM ($100.00) OverwriteAdjust":
        - gridcell "311"
        - gridcell "03/20/2025"
        - gridcell "06:13 PM"
        - gridcell "($100.00)"
        - gridcell "OverwriteAdjust"
        - gridcell
      - row "311 03/20/2025 06:13 PM $100.00 ActivateOverwrite":
        - gridcell "311"
        - gridcell "03/20/2025"
        - gridcell "06:13 PM"
        - gridcell "$100.00"
        - gridcell "ActivateOverwrite"
        - gridcell
      - row "284 03/20/2025 08:48 AM ($100.00) OverwriteAdjust":
        - gridcell "284"
        - gridcell "03/20/2025"
        - gridcell "08:48 AM"
        - gridcell "($100.00)"
        - gridcell "OverwriteAdjust"
        - gridcell
      - row "284 03/20/2025 08:48 AM $100.00 ActivateOverwrite":
        - gridcell "284"
        - gridcell "03/20/2025"
        - gridcell "08:48 AM"
        - gridcell "$100.00"
        - gridcell "ActivateOverwrite"
        - gridcell
      - row "256 03/20/2025 08:33 AM $100.00 ActivateOverwrite":
        - gridcell "256"
        - gridcell "03/20/2025"
        - gridcell "08:33 AM"
        - gridcell "$100.00"
        - gridcell "ActivateOverwrite"
        - gridcell
      - row "256 03/20/2025 08:33 AM ($100.00) OverwriteAdjust":
        - gridcell "256"
        - gridcell "03/20/2025"
        - gridcell "08:33 AM"
        - gridcell "($100.00)"
        - gridcell "OverwriteAdjust"
        - gridcell
      - row "236 03/20/2025 08:21 AM $100.00 ActivateOverwrite":
        - gridcell "236"
        - gridcell "03/20/2025"
        - gridcell "08:21 AM"
        - gridcell "$100.00"
        - gridcell "ActivateOverwrite"
        - gridcell
  - text: ACTIVITY SUMMARY
  - button
  - term: ACTIVATED DATE
  - definition: 03/05/2025
  - term: ORIGINAL VALUE
  - definition: $100.00
  - term: LAST REDEEMED DATE
  - definition: N/A
  - term: LAST REDEEMED AMT
  - definition: $0.00
  - term: BALANCE
  - definition: $100.00
  - text: "CURRENTLY VIEWING Gift Card 4321 Value: $100.00 Balance: $100.00"
  - button "SEARCH ANOTHER"
  - text: ADJUST 0.00
  - textbox "Reason typing ..."
  - button "1"
  - button "2"
  - button "3"
  - button "4"
  - button "5"
  - button "6"
  - button "7"
  - button "8"
  - button "9"
  - button
  - button "0"
  - button
  - button "DECREASE" [disabled]
  - button "INCREASE" [disabled]
- alert
```

# Test source

```ts
   1 | import { expect } from '@playwright/test';
   2 | import { createBdd } from 'playwright-bdd';
   3 |
   4 | import { constants } from '#const';
   5 | import type { PageId } from '#types';
   6 |
   7 | const { When, Then } = createBdd();
   8 |
   9 | Then(
   10 | 	'I should be redirected to {pageId} page',
   11 | 	async ({ page }, pageId: PageId) => {
   12 | 		const pageUrl = constants.PageUrl[pageId];
   13 |
   14 | 		await page.waitForURL(pageUrl);
   15 | 		await expect(page).toHaveURL(pageUrl);
   16 | 	},
   17 | );
   18 |
   19 | Then(
   20 | 	'I should see the employee {string} in the employee list',
   21 | 	async ({ page }, employeeName: string) => {
   22 | 		const employeeList = page.locator('div.xQueueList');
   23 |
   24 | 		await expect(
   25 | 			employeeList.getByText(employeeName, { exact: true }),
   26 | 		).toBeVisible();
   27 | 	},
   28 | );
   29 |
   30 | Then(
   31 | 	'I should see the {string} screen',
   32 | 	async ({ page }, screenName: string) => {
   33 | 		const screenTitle = page
   34 | 			.locator('p.MuiTypography-body1.pageName')
   35 | 			.getByText(screenName, { exact: true });
   36 |
   37 | 		await expect(screenTitle).toBeVisible();
   38 | 	},
   39 | );
   40 |
   41 | Then(
   42 | 	'I should see the {string} service',
   43 | 	async ({ page }, serviceName: string) => {
   44 | 		const service = page
   45 | 			.locator('li.ItemService')
   46 | 			.getByText(serviceName, { exact: true });
   47 | 		await expect(service).toBeVisible();
   48 | 	},
   49 | );
   50 |
   51 | When(
   52 | 	'I add the {string} service to my cart',
   53 | 	async ({ page }, serviceName: string) => {
   54 | 		const service = page
   55 | 			.locator('li.ItemService')
   56 | 			.getByText(serviceName, { exact: true });
   57 |
   58 | 		await service.click();
   59 | 	},
   60 | );
   61 |
   62 | Then(
   63 | 	'I should see my cart showing {int} item added',
   64 | 	async ({ page }, itemCount: number) => {
   65 | 		const itemCountElement = page.locator(
   66 | 			'svg[data-testid="LocalPrintshopIcon"] + span',
   67 | 		);
   68 |
   69 | 		await expect(itemCountElement).toBeVisible();
   70 |
   71 | 		expect(itemCountElement).toHaveText(itemCount.toString());
   72 | 	},
   73 | );
   74 |
   75 | When('I click on the {string} button', async ({ page }, buttonText: string) => {
   76 | 	const button = page.getByRole('button', { name: buttonText });
   77 | 	await expect(button).toBeVisible();
   78 |
   79 | 	await button.click();
   80 | });
   81 |
   82 | Then(
   83 | 	'I should see the text {string} visible',
   84 | 	async ({ page }, text: string) => {
>  85 | 		await expect(page.getByText(text, { exact: true })).toBeVisible();
      | 		                                                    ^ Error: Timed out 20000ms waiting for expect(locator).toBeVisible()
   86 | 	},
   87 | );
   88 |
   89 | Then(
   90 | 	'I should see the button with id {string} visible',
   91 | 	async ({ page }, buttonId: string) => {
   92 | 		await expect(page.locator(`button#${buttonId}`)).toBeVisible();
   93 | 	},
   94 | );
   95 |
   96 | When(
   97 | 	'I click on the element with id {string}',
   98 | 	async ({ page }, elementId: string) => {
   99 | 		const element = page.locator(`#${elementId}`);
  100 |
  101 | 		await expect(element).toBeVisible();
  102 |
  103 | 		await element.click();
  104 | 	},
  105 | );
  106 |
  107 | Then(
  108 | 	'I should see a popup dialog with title {string}',
  109 | 	async ({ page }, dialogTitle: string) => {
  110 | 		const dialogTitleElement = page.locator('.MuiDialogTitle-root');
  111 |
  112 | 		await expect(dialogTitleElement).toBeVisible();
  113 | 		await expect(dialogTitleElement).toHaveText(dialogTitle);
  114 | 	},
  115 | );
  116 |
  117 | Then(
  118 | 	'I should see a popup dialog with content {string}',
  119 | 	async ({ page }, content: string) => {
  120 | 		const dialogContentElement = page.locator('.MuiDialogContent-root');
  121 |
  122 | 		await expect(dialogContentElement).toBeVisible();
  123 | 		await expect(dialogContentElement).toHaveText(content);
  124 | 	},
  125 | );
  126 |
  127 | When(
  128 | 	'I click on the {string} button in the popup dialog',
  129 | 	async ({ page }, buttonText: string) => {
  130 | 		const dialog = page.locator('div[role="dialog"]');
  131 |
  132 | 		const button = dialog.getByRole('button', {
  133 | 			name: buttonText,
  134 | 			exact: true,
  135 | 		});
  136 | 		await expect(button).toBeVisible();
  137 |
  138 | 		await button.click();
  139 | 	},
  140 | );
  141 |
  142 | Then('I should see the tax amount non-zero', async ({ page }) => {
  143 | 	const chargeTax = page.locator('.xCharge__taxes');
  144 |
  145 | 	await expect(chargeTax).not.toContainText('0.00');
  146 | 	await expect(chargeTax).not.toHaveText('$0.00');
  147 | });
  148 |
  149 | When(
  150 | 	'I select the {string} payment type',
  151 | 	async ({ page }, paymentType: string) => {
  152 | 		const paymentTypeButton = page
  153 | 			.locator('.xPayment__type')
  154 | 			.getByText(paymentType);
  155 | 		await expect(paymentTypeButton).toBeVisible();
  156 |
  157 | 		await paymentTypeButton.click();
  158 | 	},
  159 | );
  160 |
  161 | When('I click on the item {string} button', async ({ page }, item: string) => {
  162 | 	const itemButton = page.locator('.xMultiple').getByText(item);
  163 | 	await expect(itemButton).toBeVisible();
  164 |
  165 | 	await itemButton.click();
  166 | });
  167 |
  168 | When(
  169 | 	'I select the {string} service in the dialog',
  170 | 	async ({ page }, service: string) => {
  171 | 		const serviceButton = page
  172 | 			.locator('div.xMultiple__wrap')
  173 | 			.locator('li.xTicketItems')
  174 | 			.getByText(service, { exact: true });
  175 | 		await expect(serviceButton).toBeVisible();
  176 |
  177 | 		await serviceButton.click();
  178 | 	},
  179 | );
  180 |
  181 | When(
  182 | 	'I select the {string} employee in the dialog',
  183 | 	async ({ page }, employee: string) => {
  184 | 		const employeeButton = page
  185 | 			.locator('.xEmployeeItem')
```