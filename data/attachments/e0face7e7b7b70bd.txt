# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Create tickets >> Void the item when creating a ticket
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:462:3

# Error details

```
Error: locator.click: Test timeout of 90000ms exceeded.
Call log:
  - waiting for locator('div[role="dialog"]').filter({ has: locator('#alert-dialog-title').filter({ hasText: 'PASSWORD' }) }).getByText('4', { exact: true })

    at HomePage.enterPIN (/home/circleci/project/e2e/pos-web/src/steps/x.page.ts:177:25)
    at HomePage.clockInTimesheet (/home/circleci/project/e2e/pos-web/src/steps/x.page.ts:278:3)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:22
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:464:5
```

# Page snapshot

```yaml
- banner:
  - img
  - list:
    - listitem: Timesheet
    - listitem: Check In
    - listitem: Tickets
    - listitem: Turn
    - listitem: Appointment
    - listitem: Quick Sale
    - listitem: Balance
  - text: Mar 27
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: CHECK-INS No Customer
  - button "search"
  - list:
    - listitem:
      - button "Ready"
    - listitem:
      - button "In Service"
    - listitem:
      - button "Paid"
    - listitem:
      - button "All" [disabled]
  - list:
    - listitem: "C Paid #147 Chloe Riley 07:03 PM - Now 0' Waiting $0.00"
    - listitem: "L #150 Laura 12:32 AM - Now 0' Waiting $0.00"
    - listitem: "B #151 Brian 12:32 AM - Now 0' Waiting $0.00"
    - listitem: "H #152 Hanna 12:32 AM - Now 0' Waiting $0.00"
- alert
```

# Test source

```ts
   77 | 			/**
   78 | 			 * Locate the current opening dialog
   79 | 			 */
   80 | 			dialog,
   81 | 			/**
   82 | 			 * Locate the current opening `draggable` dialog
   83 | 			 */
   84 | 			draggableDialog,
   85 | 			/**
   86 | 			 * Locate the content section of a dialog
   87 | 			 */
   88 | 			dialogContent: (dialogLocator: Locator) =>
   89 | 				dialogLocator.locator('div.MuiDialogContent-root'),
   90 | 			/**
   91 | 			 * Locate an Action Button of a dialog, ex: "CONFIRM", "CANCEL",...
   92 | 			 */
   93 | 			dialogActionButton: (dialogLocator: Locator, buttonText: string) =>
   94 | 				dialogLocator
   95 | 					.locator('div.MuiDialogActions-root')
   96 | 					.getByRole('button', { name: buttonText, exact: true }),
   97 | 			/**
   98 | 			 * Locate the Close button of a dialog, ex: "X" button at the top right corner of the dialog
   99 | 			 */
  100 | 			dialogCloseButton: (dialogLocator: Locator, buttonTitle = 'Close') =>
  101 | 				dialogLocator.locator(`button[title="${buttonTitle}"]`),
  102 |
  103 | 			/**
  104 | 			 * Locate the Toast message container
  105 | 			 */
  106 | 			toast: page.locator('div.MuiAlert-message'),
  107 |
  108 | 			/**
  109 | 			 * Locate the page's header
  110 | 			 */
  111 | 			pageHeader,
  112 | 			/**
  113 | 			 * Locate the name of the current page, usually on the top left corner of the page, ex: "Ticket View".
  114 | 			 * Some pages don't have this element
  115 | 			 */
  116 | 			pageName: pageHeader.locator('p.pageName'),
  117 | 			/**
  118 | 			 * Locate the page detail section of the current page, usually appears below the page name, ex: "John Doe - #001" (Ticket View page).
  119 | 			 * Some pages don't have this element
  120 | 			 */
  121 | 			pageDetail: pageHeader.locator('p.pageDetail'),
  122 |
  123 | 			/**
  124 | 			 * Locate the Company Profile section of the current Salon + the Breadcrumb element,
  125 | 			 * 	which is usually located on the top right corner of the page, next to the Calendar element
  126 | 			 */
  127 | 			companyProfile,
  128 | 			/**
  129 | 			 * Like the {@link companyProfile} locator, except it doesn't include the Breadcrumb element
  130 | 			 */
  131 | 			merchantInfo,
  132 | 			/**
  133 | 			 * Locate the name of the Salon on the top right corner of the page
  134 | 			 */
  135 | 			merchantName: merchantInfo.locator(
  136 | 				'li.merchantInfo__dbaName > span.label',
  137 | 			),
  138 | 			/**
  139 | 			 * Locate the contact information (address, phone number,...) on the top right corner of the page
  140 | 			 */
  141 | 			merchantContact: merchantInfo.locator('li.merchantInfo__address'),
  142 |
  143 | 			/**
  144 | 			 * Locate a Navigation Menu item
  145 | 			 */
  146 | 			navItem: (itemName: string) =>
  147 | 				page.locator('li.xNavbar__item', {
  148 | 					hasText: new RegExp(`^${itemName}$`),
  149 | 				}),
  150 | 		};
  151 | 	}
  152 |
  153 | 	/**
  154 | 	 * Wait for a specific API call to be completed
  155 | 	 */
  156 | 	public waitForResponseOfAPI(
  157 | 		api: keyof typeof constants.APIs,
  158 | 		options: TestOptions = {},
  159 | 	) {
  160 | 		return this.page.waitForResponse(
  161 | 			(response) => {
  162 | 				const [method, url] = constants.APIs[api];
  163 | 				const request = response.request();
  164 |
  165 | 				return request.url().includes(url) && request.method() === method;
  166 | 			},
  167 | 			{ timeout: options.timeout },
  168 | 		);
  169 | 	}
  170 |
  171 | 	/**
  172 | 	 * Enter a PIN using the on-screen numpad
  173 | 	 */
  174 | 	public async enterPIN(PIN: string, numpadLocator: Locator) {
  175 | 		for (const pinDigit of PIN) {
  176 | 			const pinDigitButton = numpadLocator.getByText(pinDigit, { exact: true });
> 177 | 			await pinDigitButton.click();
      | 			                     ^ Error: locator.click: Test timeout of 90000ms exceeded.
  178 | 		}
  179 | 	}
  180 |
  181 | 	/* -------------------------------- BDD steps ------------------------------- */
  182 |
  183 | 	/**
  184 | 	 * Go to a specific page by its {@link PageId}
  185 | 	 */
  186 | 	@Given('I am on the {pageId} page')
  187 | 	public async gotoPage(pageId: PageId) {
  188 | 		await this.page.goto(constants.PageUrl[pageId]);
  189 | 	}
  190 |
  191 | 	/**
  192 | 	 * Wait for the page fully loaded
  193 | 	 */
  194 | 	@When('I wait for the page fully loaded')
  195 | 	public waitForNetworkIdle() {
  196 | 		return this.page.waitForLoadState('networkidle');
  197 | 	}
  198 |
  199 | 	/**
  200 | 	 * Select an item in the Navigation Bar
  201 | 	 *
  202 | 	 * @param navPath - The path to the navigation item, could be a single item or a path to a nested item, separated by " > ".
  203 | 	 *   For example: "Quick Sale", "Timesheet > Clock In", "Timesheet > Clock Out"
  204 | 	 */
  205 | 	@When('I navigate to {string} on the navigation bar')
  206 | 	public async selectNavItem(navPath: string) {
  207 | 		const { locators } = this;
  208 |
  209 | 		// wait for the menu bar ready
  210 | 		await this.waitForNetworkIdle();
  211 |
  212 | 		const navItems = navPath.split(' > ');
  213 | 		for (const navItem of navItems) {
  214 | 			await locators.navItem(navItem).click();
  215 | 		}
  216 | 	}
  217 |
  218 | 	/**
  219 | 	 * Click on an element inside the content section of the opening dialog
  220 | 	 */
  221 | 	@When(
  222 | 		'I click on the {string} text inside the content section of the opening dialog',
  223 | 	)
  224 | 	public async clickOnContentElementInsideOpeningDialog(text: string) {
  225 | 		const { locators } = this;
  226 |
  227 | 		const dialog = locators.dialog();
  228 | 		const dialogContent = locators.dialogContent(dialog);
  229 |
  230 | 		await dialogContent.getByText(text, { exact: true }).click();
  231 | 	}
  232 |
  233 | 	/**
  234 | 	 * Click on Action Buttons of the opening dialog, ex: "CONFIRM", "CANCEL",...
  235 | 	 */
  236 | 	@When('I click on the action button {string} of the opening dialog')
  237 | 	public async clickOnActionButtonOfOpeningDialog(buttonText: string) {
  238 | 		const { locators } = this;
  239 |
  240 | 		const dialog = locators.dialog();
  241 | 		const actionButton = locators.dialogActionButton(dialog, buttonText);
  242 |
  243 | 		await actionButton.click();
  244 | 	}
  245 |
  246 | 	/**
  247 | 	 * Close the opening dialog if it's visible
  248 | 	 */
  249 | 	@When('I close the opening dialog')
  250 | 	public async closeOpeningDialog() {
  251 | 		const { locators } = this;
  252 |
  253 | 		const dialog = locators.dialog();
  254 | 		const closeButton = locators.dialogCloseButton(dialog);
  255 |
  256 | 		await closeButton.click();
  257 | 	}
  258 |
  259 | 	/**
  260 | 	 * Clock In/Out Timesheet with provided PIN
  261 | 	 */
  262 | 	@When('I clock {timesheetAction} the timesheet with PIN {string}')
  263 | 	public async clockInTimesheet(timesheetAction: TimesheetAction, PIN: string) {
  264 | 		const { locators } = this;
  265 |
  266 | 		// find and click on the Clock In / Out button
  267 | 		const clockInOutNavigationPath =
  268 | 			timesheetAction === 'in'
  269 | 				? 'Timesheet > Clock In'
  270 | 				: 'Timesheet > Clock Out';
  271 | 		await this.selectNavItem(clockInOutNavigationPath);
  272 |
  273 | 		// expect the enter password dialog to be visible
  274 | 		const enterPasswordDialog = locators.dialog('PASSWORD');
  275 | 		await expect(enterPasswordDialog).toBeVisible();
  276 |
  277 | 		// enter the PIN
```