# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Create tickets >> Create a ticket, add Tip and pay with Credit card
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:94:3

# Error details

```
Error: locator.click: Test timeout of 90000ms exceeded.
Call log:
  - waiting for locator('.xPayment__type').getByText('Credit')
    - locator resolved to <span class="label">Credit</span>
  - attempting click action
    - waiting for element to be visible, enabled and stable
    - element is not stable
  - retrying click action
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling

    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:157:27)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:22
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:109:5
```

# Page snapshot

```yaml
- banner:
  - img
  - paragraph: Ticket View
  - paragraph: "Laura (Nails) - #147"
  - button "VOID TICKET"
  - text: Mar 21
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: PAYMENT TICKET
  - button
  - term: Card Price
  - definition: $11.68
  - term: Cash Price
  - definition: $11.36
  - term: AMT DUE
  - definition: $11.36
  - term: AMT PAID
  - definition: $0.00
  - term: CHANGE
  - definition: $0.00
  - text: PAYMENT HISTORY No transactions found.
  - list:
    - listitem: Cash
    - listitem: Credit
    - listitem: Gift
    - listitem: Zelle
    - listitem: Loyalty
    - listitem: Check
    - listitem: CashApp
    - listitem: Venmo
  - text: $0.00
  - button "7"
  - button "8"
  - button "9"
  - button "4"
  - button "5"
  - button "6"
  - button "1"
  - button "2"
  - button "3"
  - button
  - button "0"
  - button
  - button "Pay"
  - button "1"
  - text: Select customer
  - button
  - list:
    - listitem: 1 Manicure S x 1 D Laura (Nails) 08:52 AM - 08:52 AM $6.00
  - list:
    - listitem: TECHNICIAN
    - listitem: DISCOUNT ITEM
    - listitem: COMBINE TICKET
    - listitem: VOID ITEM
  - list:
    - listitem: Tip $5.00
    - listitem: Discount $0.00
    - listitem: Tax $0.36
    - listitem: Sub Total $6.00
    - listitem: TOTAL $11.36
  - button "CANCEL"
  - button "CLOSE TICKET" [disabled]
- alert: Home - xPOS Salon
```

# Test source

```ts
   57 |
   58 | 		await service.click();
   59 | 	},
   60 | );
   61 |
   62 | Then(
   63 | 	'I should see my cart showing {int} item added',
   64 | 	async ({ page }, itemCount: number) => {
   65 | 		const itemCountElement = page.locator(
   66 | 			'svg[data-testid="LocalPrintshopIcon"] + span',
   67 | 		);
   68 |
   69 | 		await expect(itemCountElement).toBeVisible();
   70 |
   71 | 		expect(itemCountElement).toHaveText(itemCount.toString());
   72 | 	},
   73 | );
   74 |
   75 | When('I click on the {string} button', async ({ page }, buttonText: string) => {
   76 | 	const button = page.getByRole('button', { name: buttonText });
   77 | 	await expect(button).toBeVisible();
   78 |
   79 | 	await button.click();
   80 | });
   81 |
   82 | Then(
   83 | 	'I should see the text {string} visible',
   84 | 	async ({ page }, text: string) => {
   85 | 		await expect(page.getByText(text, { exact: true })).toBeVisible();
   86 | 	},
   87 | );
   88 |
   89 | Then(
   90 | 	'I should see the button with id {string} visible',
   91 | 	async ({ page }, buttonId: string) => {
   92 | 		await expect(page.locator(`button#${buttonId}`)).toBeVisible();
   93 | 	},
   94 | );
   95 |
   96 | When(
   97 | 	'I click on the element with id {string}',
   98 | 	async ({ page }, elementId: string) => {
   99 | 		const element = page.locator(`#${elementId}`);
  100 |
  101 | 		await expect(element).toBeVisible();
  102 |
  103 | 		await element.click();
  104 | 	},
  105 | );
  106 |
  107 | Then(
  108 | 	'I should see a popup dialog with title {string}',
  109 | 	async ({ page }, dialogTitle: string) => {
  110 | 		const dialogTitleElement = page.locator('.MuiDialogTitle-root');
  111 |
  112 | 		await expect(dialogTitleElement).toBeVisible();
  113 | 		await expect(dialogTitleElement).toHaveText(dialogTitle);
  114 | 	},
  115 | );
  116 |
  117 | Then(
  118 | 	'I should see a popup dialog with content {string}',
  119 | 	async ({ page }, content: string) => {
  120 | 		const dialogContentElement = page.locator('.MuiDialogContent-root');
  121 |
  122 | 		await expect(dialogContentElement).toBeVisible();
  123 | 		await expect(dialogContentElement).toHaveText(content);
  124 | 	},
  125 | );
  126 |
  127 | When(
  128 | 	'I click on the {string} button in the popup dialog',
  129 | 	async ({ page }, buttonText: string) => {
  130 | 		const dialog = page.locator('div[role="dialog"]');
  131 |
  132 | 		const button = dialog.getByRole('button', {
  133 | 			name: buttonText,
  134 | 			exact: true,
  135 | 		});
  136 | 		await expect(button).toBeVisible();
  137 |
  138 | 		await button.click();
  139 | 	},
  140 | );
  141 |
  142 | Then('I should see the tax amount non-zero', async ({ page }) => {
  143 | 	const chargeTax = page.locator('.xCharge__taxes');
  144 |
  145 | 	await expect(chargeTax).not.toContainText('0.00');
  146 | 	await expect(chargeTax).not.toHaveText('$0.00');
  147 | });
  148 |
  149 | When(
  150 | 	'I select the {string} payment type',
  151 | 	async ({ page }, paymentType: string) => {
  152 | 		const paymentTypeButton = page
  153 | 			.locator('.xPayment__type')
  154 | 			.getByText(paymentType);
  155 | 		await expect(paymentTypeButton).toBeVisible();
  156 |
> 157 | 		await paymentTypeButton.click();
      | 		                        ^ Error: locator.click: Test timeout of 90000ms exceeded.
  158 | 	},
  159 | );
  160 |
  161 | When('I click on the item {string} button', async ({ page }, item: string) => {
  162 | 	const itemButton = page.locator('.xMultiple').getByText(item);
  163 | 	await expect(itemButton).toBeVisible();
  164 |
  165 | 	await itemButton.click();
  166 | });
  167 |
  168 | When(
  169 | 	'I select the {string} service in the dialog',
  170 | 	async ({ page }, service: string) => {
  171 | 		const serviceButton = page
  172 | 			.locator('div.xMultiple__wrap')
  173 | 			.locator('li.xTicketItems')
  174 | 			.getByText(service, { exact: true });
  175 | 		await expect(serviceButton).toBeVisible();
  176 |
  177 | 		await serviceButton.click();
  178 | 	},
  179 | );
  180 |
  181 | When(
  182 | 	'I select the {string} employee in the dialog',
  183 | 	async ({ page }, employee: string) => {
  184 | 		const employeeButton = page
  185 | 			.locator('.xEmployeeItem')
  186 | 			.getByText(employee, { exact: true });
  187 | 		await expect(employeeButton).toBeVisible();
  188 |
  189 | 		await employeeButton.click();
  190 | 	},
  191 | );
  192 |
  193 | When(
  194 | 	'I click on the {string} button in the dialog',
  195 | 	async ({ page }, button: string) => {
  196 | 		const buttonElement = page
  197 | 			.locator('.xMultiple__wrap')
  198 | 			.getByRole('button', { name: button });
  199 |
  200 | 		await expect(buttonElement).toBeVisible();
  201 |
  202 | 		await buttonElement.click();
  203 | 	},
  204 | );
  205 |
  206 | Then(
  207 | 	'I should see the {string} employee in my cart',
  208 | 	async ({ page }, employee: string) => {
  209 | 		const employeeElement = page
  210 | 			.locator('ul.xTicketItemList')
  211 | 			.getByText(employee);
  212 | 		await expect(employeeElement).toContainText(employee);
  213 | 	},
  214 | );
  215 |
  216 | Then(
  217 | 	'I should see multiple {string} employees in my cart',
  218 | 	async ({ page }, employee: string) => {
  219 | 		const employeeElements = await page
  220 | 			.locator('li.xTicketItems')
  221 | 			.getByText(employee)
  222 | 			.all();
  223 |
  224 | 		expect(employeeElements.length).toBeGreaterThan(1);
  225 | 	},
  226 | );
  227 |
  228 | Then('I should see the {string} name', async ({ page }, name: string) => {
  229 | 	const nameElement = page.locator('.xPayment__card--input').getByText(name);
  230 | 	await expect(nameElement).toContainText(name);
  231 | });
  232 |
  233 | When(
  234 | 	'I fill the Gift card with {string}',
  235 | 	async ({ page }, giftCardNumber: string) => {
  236 | 		for (const digit of giftCardNumber) {
  237 | 			await page
  238 | 				.locator(`button.key:has(span.text-num:has-text("${digit}"))`)
  239 | 				.click();
  240 | 		}
  241 |
  242 | 		await expect(page.locator('.xPayment__card--input').nth(0)).toContainText(
  243 | 			giftCardNumber,
  244 | 		);
  245 | 	},
  246 | );
  247 |
  248 | When(
  249 | 	'I click on the adding {string} button',
  250 | 	async ({ page }, button: string) => {
  251 | 		const buttonElement = page.locator('.xCharge').getByText(button);
  252 | 		await expect(buttonElement).toBeVisible();
  253 |
  254 | 		await buttonElement.click();
  255 | 	},
  256 | );
  257 |
```