# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Authentication: Admin role
- Location: /home/circleci/project/e2e/pos-web/src/auth.setup.ts:14:1

# Error details

```
Error: expect(locator).toBeVisible()

Locator: locator('div.xHeader__top').locator('div.xCompanyProfile').locator('ul.xHeader__info').getByText('Thuyen Nguyen')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 20000ms
  - waiting for locator('div.xHeader__top').locator('div.xCompanyProfile').locator('ul.xHeader__info').getByText('Thuyen Nguyen')

    at /home/circleci/project/e2e/pos-web/src/auth.setup.ts:60:21
```

# Test source

```ts
   1 | import { resolve } from 'node:path';
   2 |
   3 | import { expect } from '@playwright/test';
   4 | import { ensureFile } from 'fs-extra/esm';
   5 |
   6 | import { PageId, UserRole } from '#types';
   7 |
   8 | import { constants } from './const';
   9 | import { test as setup } from './steps/fixtures';
  10 | import { LoginPage } from './steps/login.page';
  11 |
  12 | const __dirname = import.meta.dirname;
  13 |
  14 | setup(
  15 | 	'Authentication: Admin role',
  16 | 	async ({ testConfig, testStorage, page, xPage }) => {
  17 | 		setup.setTimeout(40_000);
  18 |
  19 | 		// make sure that the path is ready
  20 | 		const authStorage = resolve(
  21 | 			__dirname,
  22 | 			'..',
  23 | 			constants.AuthStorage[UserRole.ADMIN],
  24 | 		);
  25 | 		await ensureFile(authStorage);
  26 |
  27 | 		// go to login page
  28 | 		await xPage.gotoPage(PageId.LOGIN);
  29 | 		const loginPage = new LoginPage(testConfig, testStorage, page);
  30 |
  31 | 		// key in email & password
  32 | 		await loginPage.keyInAdminEmailPassword(
  33 | 			testConfig.adminEmail,
  34 | 			testConfig.adminPassword,
  35 | 		);
  36 |
  37 | 		// visual check
  38 | 		await page.waitForLoadState('networkidle'); // wait until the background image fully loaded
  39 | 		await loginPage.captureLoginFormScreenshot();
  40 |
  41 | 		// submit login
  42 | 		await loginPage.submitLogin();
  43 |
  44 | 		const businessDayResetPrompt = loginPage.locators.businessDayResetPrompt;
  45 | 		const username = loginPage.locators.merchantInfo.getByText(
  46 | 			testConfig.adminName,
  47 | 		);
  48 |
  49 | 		// wait until the loading spinner is gone
  50 | 		await expect(businessDayResetPrompt.or(username)).toBeVisible({
  51 | 			// currently, look like the login process is quite slow, re-adjust this value in the future if necessary
  52 | 			timeout: 25_000,
  53 | 		});
  54 |
  55 | 		// reset business date if prompted
  56 | 		if (await businessDayResetPrompt.isVisible()) {
  57 | 			await loginPage.resetBusinessDay();
  58 |
  59 | 			// wait until the homepage is loaded
> 60 | 			expect(username).toBeVisible();
     | 			                 ^ Error: expect(locator).toBeVisible()
  61 | 		}
  62 |
  63 | 		// persist all browser context to the auth storage
  64 | 		await page.context().storageState({ path: authStorage });
  65 | 	},
  66 | );
  67 |
```