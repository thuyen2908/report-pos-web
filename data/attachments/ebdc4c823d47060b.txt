# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Create tickets >> Split tip on ticket after paying by Credit card
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:150:3

# Error details

```
Error: Timed out 20000ms waiting for expect(locator).toBeVisible()

Locator: locator('.xMultiple__employee').getByText('Kelley', { exact: true })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 20000ms
  - waiting for locator('.xMultiple__employee').getByText('Kelley', { exact: true })

    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:202:32)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.0/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:60
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.0/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:162:5
```

# Page snapshot

```yaml
- banner:
  - img
  - list:
    - listitem: Timesheet
    - listitem: Check In
    - listitem: Tickets
    - listitem: Turn
    - listitem: Appointment
    - listitem: Quick Sale
    - listitem: Balance
  - text: Mar 13
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: CHECK-INS No Customer
  - tablist:
    - tab "NAILS" [selected]
    - tab "HAIR"
  - tabpanel:
    - list:
      - listitem: "C #1 Christ 07:00 AM Turn: 0.0"
      - listitem: "A #2 Anna 07:00 AM Turn: 1.0"
      - listitem: "K #3 Kelley 07:00 AM Turn: 1.0"
      - listitem: "B #4 Brian 07:00 AM Turn: 1.0"
      - listitem:
        - img "item service Owner"
        - text: "#5 Owner 03:22 AM Turn: 3.0"
      - listitem: "D #6 Dylan 07:00 AM Turn: 3.0"
      - listitem: "L #7 Laura 07:00 AM Turn: 3.0"
      - listitem: "T #8 Tim 07:00 AM Turn: 3.0"
      - listitem:
        - img "item service Emma"
        - text: "#9 Emma 07:00 AM Turn: 3.0"
      - listitem: "H #10 Hanna 07:00 AM Turn: 3.0"
  - button "search"
  - list:
    - listitem:
      - button "Ready"
    - listitem:
      - button "In Service"
    - listitem:
      - button "Paid"
    - listitem:
      - button "All" [disabled]
  - list:
    - listitem: "T #138 Tina 06:48 AM - Now 0' Waiting $0.00"
- alert: "Ticket View #137 - xPOS Salon"
- alert: Ticket 137 deleted successfully.
```

# Test source

```ts
  102 |
  103 | When(
  104 | 	'I click on the element with id {string}',
  105 | 	async ({ page }, elementId: string) => {
  106 | 		const element = page.locator(`#${elementId}`);
  107 |
  108 | 		await expect(element).toBeVisible();
  109 |
  110 | 		await element.click();
  111 | 	},
  112 | );
  113 |
  114 | Then(
  115 | 	'I should see a popup dialog with title {string}',
  116 | 	async ({ page }, dialogTitle: string) => {
  117 | 		const dialogTitleElement = page.locator('.MuiDialogTitle-root');
  118 |
  119 | 		await expect(dialogTitleElement).toBeVisible();
  120 | 		await expect(dialogTitleElement).toHaveText(dialogTitle);
  121 | 	},
  122 | );
  123 |
  124 | Then(
  125 | 	'I should see a popup dialog with content {string}',
  126 | 	async ({ page }, content: string) => {
  127 | 		const dialogContentElement = page.locator('.MuiDialogContent-root');
  128 |
  129 | 		await expect(dialogContentElement).toBeVisible();
  130 | 		await expect(dialogContentElement).toHaveText(content);
  131 | 	},
  132 | );
  133 |
  134 | When('I wait for {int} seconds', async ({ page }, seconds: number) => {
  135 | 	await page.waitForTimeout(seconds * 1000);
  136 | });
  137 |
  138 | Then('The test should pause here for debugging', async ({ page }) => {
  139 | 	await page.pause();
  140 | });
  141 |
  142 | When(
  143 | 	'I click on the {string} button in the popup dialog',
  144 | 	async ({ page }, buttonText: string) => {
  145 | 		const dialog = page.locator('div[role="dialog"]');
  146 |
  147 | 		const button = dialog.getByRole('button', {
  148 | 			name: buttonText,
  149 | 			exact: true,
  150 | 		});
  151 | 		await expect(button).toBeVisible();
  152 |
  153 | 		await button.click();
  154 | 	},
  155 | );
  156 |
  157 | Then('I should see the tax amount non-zero', async ({ page }) => {
  158 | 	const chargeTax = page.locator('.xCharge__taxes');
  159 |
  160 | 	await expect(chargeTax).not.toContainText('0.00');
  161 | 	await expect(chargeTax).not.toHaveText('$0.00');
  162 | });
  163 |
  164 | When(
  165 | 	'I select the {string} payment type',
  166 | 	async ({ page }, paymentType: string) => {
  167 | 		const paymentTypeButton = page
  168 | 			.locator('.xPayment__type')
  169 | 			.getByText(paymentType);
  170 | 		await expect(paymentTypeButton).toBeVisible();
  171 |
  172 | 		await paymentTypeButton.click();
  173 | 	},
  174 | );
  175 |
  176 | When('I click on the item {string} button', async ({ page }, item: string) => {
  177 | 	const itemButton = page.locator('li.xMultiple__status').getByText(item);
  178 | 	await expect(itemButton).toBeVisible();
  179 |
  180 | 	await itemButton.click();
  181 | });
  182 |
  183 | When(
  184 | 	'I select the {string} service in the dialog',
  185 | 	async ({ page }, service: string) => {
  186 | 		const serviceButton = page
  187 | 			.locator('div.xMultiple__wrap')
  188 | 			.locator('li.xTicketItems')
  189 | 			.getByText(service, { exact: true });
  190 | 		await expect(serviceButton).toBeVisible();
  191 |
  192 | 		await serviceButton.click();
  193 | 	},
  194 | );
  195 |
  196 | When(
  197 | 	'I select the {string} employee in the dialog',
  198 | 	async ({ page }, employee: string) => {
  199 | 		const employeeButton = page
  200 | 			.locator('.xMultiple__employee')
  201 | 			.getByText(employee, { exact: true });
> 202 | 		await expect(employeeButton).toBeVisible();
      | 		                             ^ Error: Timed out 20000ms waiting for expect(locator).toBeVisible()
  203 |
  204 | 		await employeeButton.click();
  205 | 	},
  206 | );
  207 |
  208 | When(
  209 | 	'I click on the {string} button in the dialog',
  210 | 	async ({ page }, button: string) => {
  211 | 		const buttonElement = page
  212 | 			.locator('.xMultiple__wrap')
  213 | 			.getByRole('button', { name: button });
  214 |
  215 | 		await expect(buttonElement).toBeVisible();
  216 |
  217 | 		await buttonElement.click();
  218 | 	},
  219 | );
  220 |
  221 | Then(
  222 | 	'I should see the {string} employee in my cart',
  223 | 	async ({ page }, employee: string) => {
  224 | 		const employeeElement = page
  225 | 			.locator('ul.xTicketItemList')
  226 | 			.getByText(employee);
  227 | 		await expect(employeeElement).toContainText(employee);
  228 | 	},
  229 | );
  230 |
  231 | Then('I should see the {string} name', async ({ page }, name: string) => {
  232 | 	const nameElement = page.locator('.xPayment__card--input').getByText(name);
  233 | 	await expect(nameElement).toContainText(name);
  234 | });
  235 |
  236 | When(
  237 | 	'I fill the Gift card with {string}',
  238 | 	async ({ page }, giftCardNumber: string) => {
  239 | 		for (const digit of giftCardNumber) {
  240 | 			await page
  241 | 				.locator(`button.key:has(span.text-num:has-text("${digit}"))`)
  242 | 				.click();
  243 | 		}
  244 |
  245 | 		await expect(page.locator('.xPayment__card--input').nth(0)).toContainText(
  246 | 			giftCardNumber,
  247 | 		);
  248 | 	},
  249 | );
  250 |
  251 | When(
  252 | 	'I click on the adding {string} button',
  253 | 	async ({ page }, button: string) => {
  254 | 		const buttonElement = page.locator('.xCharge').getByText(button);
  255 | 		await expect(buttonElement).toBeVisible();
  256 |
  257 | 		await buttonElement.click();
  258 | 	},
  259 | );
  260 |
  261 | When('I fill {string} from the numpad', async ({ page }, amount: string) => {
  262 | 	const numpadButton = page.locator(
  263 | 		`button.key:has(span.text-num:has-text("${amount}"))`,
  264 | 	);
  265 |
  266 | 	await numpadButton.click();
  267 |
  268 | 	const OKButton = page.getByRole('button', { name: 'OK' });
  269 |
  270 | 	await OKButton.click();
  271 | });
  272 |
  273 | Then('I should see {string} tip in my cart', async ({ page }, tip: string) => {
  274 | 	const tipElement = page.locator('ul.xCharge').getByText(tip);
  275 |
  276 | 	await expect(tipElement).toContainText(tip);
  277 | });
  278 |
  279 | When(
  280 | 	'I fill the last 4 digits of card number {string}',
  281 | 	async ({ page }, number: string) => {
  282 | 		for (const digit of number) {
  283 | 			await page
  284 | 				.locator(`button.key:has(span.text-num:has-text("${digit}"))`)
  285 | 				.click();
  286 | 		}
  287 |
  288 | 		await expect(page.locator('.xPayment__card--number-digits')).toContainText(
  289 | 			number,
  290 | 		);
  291 | 	},
  292 | );
  293 |
  294 | When('I click on the Select customer', async ({ page }) => {
  295 | 	page.locator('.TicketSearch__customer').click();
  296 | });
  297 |
  298 | Then(
  299 | 	'I should see the loyalty program {string} visible',
  300 | 	async ({ page }, program: string) => {
  301 | 		const loyaltyProgram = page.locator(
  302 | 			'#mui-component-select-loyaltyProgramId',
```