# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Create tickets >> Add an existing customer to a new ticket and pay with Loyalty points
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:26:3

# Error details

```
Error: page.waitForURL: Test timeout of 90000ms exceeded.
=========================== logs ===========================
waiting for navigation to "https://posqa.azurewebsites.net" until "load"
============================================================
    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:14:14)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:60
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:41:5
```

# Page snapshot

```yaml
- banner:
  - img
  - list:
    - listitem: Timesheet
    - listitem: Check In
    - listitem: Tickets
    - listitem: Turn
    - listitem: Appointment
    - listitem: Quick Sale
    - listitem: Balance
  - text: Mar 18
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: CHECK-INS No Customer
  - tablist:
    - tab "NAILS" [selected]
    - tab "HAIR"
  - tabpanel:
    - list:
      - listitem: "S #1 Sandy 07:00 AM Turn: 0.0"
      - listitem: "T #2 Tom 07:00 AM Turn: 0.0"
      - listitem: "B #3 Bella 07:00 AM Turn: 0.0"
      - listitem: "R #4 Ruby 07:00 AM Turn: 0.0"
      - listitem: "S #5 Sarah 07:00 AM Turn: 0.0"
      - listitem: "J #6 Jack 07:00 AM Turn: 0.0"
      - listitem: "T #7 Tim 07:00 AM Turn: 0.0"
      - listitem: "M #8 Maya 07:00 AM Turn: 0.0"
      - listitem:
        - img "item service Owner"
        - text: "#9 Owner 06:47 AM Turn: 0.0"
      - listitem: "A #10 Anna 07:00 AM Turn: 0.0"
      - listitem: "D #11 Dylan 07:00 AM Turn: 0.0"
      - listitem: "C #12 Christ 07:00 AM Turn: 0.0"
      - listitem: "T #13 Tina 07:00 AM Turn: 0.0"
      - listitem: "L #14 Laura 07:00 AM Turn: 0.0"
      - listitem:
        - img "item service Emma"
        - text: "#15 Emma 07:00 AM Turn: 0.0"
      - listitem: "H #16 Hanna 07:00 AM Turn: 0.0"
      - listitem: "H #17 Harry 07:00 AM Turn: 1.0"
      - listitem: "B #18 Brian 07:00 AM Turn: 1.0"
      - listitem: "L #19 Lisa 07:00 AM Turn: 1.0"
      - listitem: "K #20 Kelley 07:00 AM Turn: 1.0"
      - listitem: "K #21 Kim 07:00 AM Turn: 6.0"
  - button "search"
  - list:
    - listitem:
      - button "Ready"
    - listitem:
      - button "In Service"
    - listitem:
      - button "Paid"
    - listitem:
      - button "All" [disabled]
  - text: No Ticket Found.
- alert: Home - xPOS Salon
- alert: Ticket 163 deleted successfully.
```

# Test source

```ts
   1 | import { expect } from '@playwright/test';
   2 | import { createBdd } from 'playwright-bdd';
   3 |
   4 | import { constants } from '#const';
   5 | import type { PageId } from '#types';
   6 |
   7 | const { When, Then } = createBdd();
   8 |
   9 | Then(
   10 | 	'I should be redirected to {pageId} page',
   11 | 	async ({ page }, pageId: PageId) => {
   12 | 		const pageUrl = constants.PageUrl[pageId];
   13 |
>  14 | 		await page.waitForURL(pageUrl);
      | 		           ^ Error: page.waitForURL: Test timeout of 90000ms exceeded.
   15 | 		await expect(page).toHaveURL(pageUrl);
   16 | 	},
   17 | );
   18 |
   19 | Then(
   20 | 	'I should see the employee {string} in the employee list',
   21 | 	async ({ page }, employeeName: string) => {
   22 | 		const employeeList = page.locator('div.xQueueList');
   23 |
   24 | 		await expect(
   25 | 			employeeList.getByText(employeeName, { exact: true }),
   26 | 		).toBeVisible();
   27 | 	},
   28 | );
   29 |
   30 | Then(
   31 | 	'I should see the {string} screen',
   32 | 	async ({ page }, screenName: string) => {
   33 | 		const screenTitle = page
   34 | 			.locator('p.MuiTypography-body1.pageName')
   35 | 			.getByText(screenName, { exact: true });
   36 |
   37 | 		await expect(screenTitle).toBeVisible();
   38 | 	},
   39 | );
   40 |
   41 | Then(
   42 | 	'I should see the {string} service',
   43 | 	async ({ page }, serviceName: string) => {
   44 | 		const service = page
   45 | 			.locator('li.ItemService')
   46 | 			.getByText(serviceName, { exact: true });
   47 | 		await expect(service).toBeVisible();
   48 | 	},
   49 | );
   50 |
   51 | When(
   52 | 	'I add the {string} service to my cart',
   53 | 	async ({ page }, serviceName: string) => {
   54 | 		const service = page
   55 | 			.locator('li.ItemService')
   56 | 			.getByText(serviceName, { exact: true });
   57 |
   58 | 		await service.click();
   59 | 	},
   60 | );
   61 |
   62 | Then(
   63 | 	'I should see my cart showing {int} item added',
   64 | 	async ({ page }, itemCount: number) => {
   65 | 		const itemCountElement = page.locator(
   66 | 			'svg[data-testid="LocalPrintshopIcon"] + span',
   67 | 		);
   68 |
   69 | 		await expect(itemCountElement).toBeVisible();
   70 |
   71 | 		expect(itemCountElement).toHaveText(itemCount.toString());
   72 | 	},
   73 | );
   74 |
   75 | When('I click on the {string} button', async ({ page }, buttonText: string) => {
   76 | 	const button = page.getByRole('button', { name: buttonText });
   77 | 	await expect(button).toBeVisible();
   78 |
   79 | 	await button.click();
   80 | });
   81 |
   82 | Then(
   83 | 	'I should see the text {string} visible',
   84 | 	async ({ page }, text: string) => {
   85 | 		await expect(page.getByText(text, { exact: true })).toBeVisible();
   86 | 	},
   87 | );
   88 |
   89 | Then(
   90 | 	'I should see the button with id {string} visible',
   91 | 	async ({ page }, buttonId: string) => {
   92 | 		await expect(page.locator(`button#${buttonId}`)).toBeVisible();
   93 | 	},
   94 | );
   95 |
   96 | When(
   97 | 	'I click on the element with id {string}',
   98 | 	async ({ page }, elementId: string) => {
   99 | 		const element = page.locator(`#${elementId}`);
  100 |
  101 | 		await expect(element).toBeVisible();
  102 |
  103 | 		await element.click();
  104 | 	},
  105 | );
  106 |
  107 | Then(
  108 | 	'I should see a popup dialog with title {string}',
  109 | 	async ({ page }, dialogTitle: string) => {
  110 | 		const dialogTitleElement = page.locator('.MuiDialogTitle-root');
  111 |
  112 | 		await expect(dialogTitleElement).toBeVisible();
  113 | 		await expect(dialogTitleElement).toHaveText(dialogTitle);
  114 | 	},
```