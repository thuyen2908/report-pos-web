# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Create tickets >> Add an existing customer to a new ticket and pay with Loyalty points
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:26:3

# Error details

```
Error: Timed out 20000ms waiting for expect(locator).toBeVisible()

Locator: locator('li.xTicketItems').getByText('Manicure', { exact: true })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 20000ms
  - waiting for locator('li.xTicketItems').getByText('Manicure', { exact: true })

    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:65:27)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.0/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:22
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.0/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:29:5
```

# Page snapshot

```yaml
- banner:
  - img
  - list:
    - listitem: Timesheet
    - listitem: Check In
    - listitem: Tickets
    - listitem: Turn
    - listitem: Appointment
    - listitem: Quick Sale
    - listitem: Balance
  - text: Mar 07
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: CHECK-INS No Customer
  - button "search"
  - list:
    - listitem:
      - button "Ready"
    - listitem:
      - button "In Service"
    - listitem:
      - button "Paid"
    - listitem:
      - button "All" [disabled]
  - list:
    - listitem: "T In Service #120 Tim 07:47 AM - Now 0' Waiting $0.00"
    - listitem: "L Paid #122 Laura 07:47 AM - 07:47 AM 0' Waiting $11.36"
    - listitem:
      - img "item service Emma"
      - text: "Paid #123 Emma 07:47 AM - 07:47 AM 0' Waiting $6.36"
- alert
```

# Test source

```ts
   1 | import { expect } from '@playwright/test';
   2 | import { createBdd } from 'playwright-bdd';
   3 |
   4 | import { constants } from '#const';
   5 | import type { PageId } from '#types';
   6 |
   7 | const { When, Then } = createBdd();
   8 |
   9 | Then(
   10 | 	'I should be redirected to {pageId} page',
   11 | 	async ({ page }, pageId: PageId) => {
   12 | 		const pageUrl = constants.PageUrl[pageId];
   13 |
   14 | 		await page.waitForURL(pageUrl);
   15 | 		await expect(page).toHaveURL(pageUrl);
   16 | 	},
   17 | );
   18 |
   19 | Then(
   20 | 	'I should see the employee {string} in the employee list',
   21 | 	async ({ page }, employeeName: string) => {
   22 | 		const employeeList = page.locator('div.xQueueList');
   23 |
   24 | 		await expect(
   25 | 			employeeList.getByText(employeeName, { exact: true }),
   26 | 		).toBeVisible();
   27 | 	},
   28 | );
   29 |
   30 | Then(
   31 | 	'I should see the {string} screen',
   32 | 	async ({ page }, screenName: string) => {
   33 | 		const screenTitle = page
   34 | 			.locator('p.MuiTypography-body1.pageName')
   35 | 			.getByText(screenName, { exact: true });
   36 |
   37 | 		await expect(screenTitle).toBeVisible();
   38 | 	},
   39 | );
   40 |
   41 | Then(
   42 | 	'I should see the {string} service',
   43 | 	async ({ page }, serviceName: string) => {
   44 | 		const service = page
   45 | 			.locator('li.ItemService')
   46 | 			.getByText(serviceName, { exact: true });
   47 | 		await expect(service).toBeVisible();
   48 | 	},
   49 | );
   50 |
   51 | When(
   52 | 	'I add the {string} service to my cart',
   53 | 	async ({ page }, serviceName: string) => {
   54 | 		const service = page
   55 | 			.locator('li.ItemService')
   56 | 			.getByText(serviceName, { exact: true });
   57 |
   58 | 		await service.click();
   59 |
   60 | 		// verify that the service is added to the cart
   61 | 		const addedItem = page
   62 | 			.locator('li.xTicketItems')
   63 | 			.getByText(serviceName, { exact: true });
   64 |
>  65 | 		await expect(addedItem).toBeVisible();
      | 		                        ^ Error: Timed out 20000ms waiting for expect(locator).toBeVisible()
   66 | 	},
   67 | );
   68 |
   69 | Then(
   70 | 	'I should see my cart showing {int} item added',
   71 | 	async ({ page }, itemCount: number) => {
   72 | 		const itemCountElement = page.locator(
   73 | 			'svg[data-testid="LocalPrintshopIcon"] + span',
   74 | 		);
   75 |
   76 | 		await expect(itemCountElement).toBeVisible();
   77 |
   78 | 		expect(itemCountElement).toHaveText(itemCount.toString());
   79 | 	},
   80 | );
   81 |
   82 | When('I click on the {string} button', async ({ page }, buttonText: string) => {
   83 | 	const button = page.getByRole('button', { name: buttonText });
   84 | 	await expect(button).toBeVisible();
   85 |
   86 | 	await button.click();
   87 | });
   88 |
   89 | Then(
   90 | 	'I should see the text {string} visible',
   91 | 	async ({ page }, text: string) => {
   92 | 		await expect(page.getByText(text, { exact: true })).toBeVisible();
   93 | 	},
   94 | );
   95 |
   96 | Then(
   97 | 	'I should see the button with id {string} visible',
   98 | 	async ({ page }, buttonId: string) => {
   99 | 		await expect(page.locator(`button#${buttonId}`)).toBeVisible();
  100 | 	},
  101 | );
  102 |
  103 | When(
  104 | 	'I click on the element with id {string}',
  105 | 	async ({ page }, elementId: string) => {
  106 | 		const element = page.locator(`#${elementId}`);
  107 |
  108 | 		await expect(element).toBeVisible();
  109 |
  110 | 		await element.click();
  111 | 	},
  112 | );
  113 |
  114 | Then(
  115 | 	'I should see a popup dialog with title {string}',
  116 | 	async ({ page }, dialogTitle: string) => {
  117 | 		const dialogTitleElement = page.locator('.MuiDialogTitle-root');
  118 |
  119 | 		await expect(dialogTitleElement).toBeVisible();
  120 | 		await expect(dialogTitleElement).toHaveText(dialogTitle);
  121 | 	},
  122 | );
  123 |
  124 | Then(
  125 | 	'I should see a popup dialog with content {string}',
  126 | 	async ({ page }, content: string) => {
  127 | 		const dialogContentElement = page.locator('.MuiDialogContent-root');
  128 |
  129 | 		await expect(dialogContentElement).toBeVisible();
  130 | 		await expect(dialogContentElement).toHaveText(content);
  131 | 	},
  132 | );
  133 |
  134 | When('I wait for {int} seconds', async ({ page }, seconds: number) => {
  135 | 	await page.waitForTimeout(seconds * 1000);
  136 | });
  137 |
  138 | Then('The test should pause here for debugging', async ({ page }) => {
  139 | 	await page.pause();
  140 | });
  141 |
  142 | When(
  143 | 	'I click on the {string} button in the popup dialog',
  144 | 	async ({ page }, buttonText: string) => {
  145 | 		const dialog = page.locator('div[role="dialog"]');
  146 |
  147 | 		const button = dialog.getByRole('button', {
  148 | 			name: buttonText,
  149 | 			exact: true,
  150 | 		});
  151 | 		await expect(button).toBeVisible();
  152 |
  153 | 		await button.click();
  154 | 	},
  155 | );
  156 |
  157 | Then('I should see the tax amount non-zero', async ({ page }) => {
  158 | 	const chargeTax = page.locator('.xCharge__taxes');
  159 |
  160 | 	await expect(chargeTax).not.toContainText('0.00');
  161 | 	await expect(chargeTax).not.toHaveText('$0.00');
  162 | });
  163 |
  164 | When(
  165 | 	'I select the {string} payment type',
```