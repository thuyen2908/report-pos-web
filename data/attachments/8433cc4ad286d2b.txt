# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Create tickets >> Void the item when creating a ticket
- Location: /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:462:3

# Error details

```
Error: Timed out 30000ms waiting for expect(locator).toHaveText(expected)

Locator: locator('.xVoid').getByText('Mistake', { exact: true })
Expected string: "Mistake"
Received: <element(s) not found>
Call log:
  - expect.toHaveText with timeout 30000ms
  - waiting for locator('.xVoid').getByText('Mistake', { exact: true })

    at Object.<anonymous> (/home/circleci/project/e2e/pos-web/src/features/steps.ts:798:30)
    at /home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:57:60
    at BddStepInvoker.invoke (/home/circleci/project/node_modules/.pnpm/playwright-bdd@8.2.1_@cucumber+message-streams@4.0.1_@cucumber+messages@27.0.2__@playwright+test@1.51.1/node_modules/playwright-bdd/src/runtime/bddStepInvoker.ts:51:5)
    at /home/circleci/project/e2e/pos-web/dist/bdd/create-tickets.feature.spec.js:477:5
```

# Page snapshot

```yaml
- banner:
  - img
  - list:
    - listitem: Timesheet
    - listitem: Check In
    - listitem: Tickets
    - listitem: Turn
    - listitem: Appointment
    - listitem: Quick Sale
    - listitem: Balance
  - text: Mar 23
  - list:
    - listitem: BLANC NAILS
    - listitem:
      - paragraph: ", , | (707) 707-1122"
      - text: "Thuyen Nguyen | Station: 1"
- list
- main:
  - text: CHECK-INS No Customer
  - tablist:
    - tab "NAILS" [selected]
    - tab "HAIR"
  - tabpanel:
    - list:
      - listitem: "T #1 Tom 07:00 AM Turn: 0.0"
      - listitem: "C #2 Christ 07:00 AM Turn: 0.0"
      - listitem: "L #3 Lisa 07:00 AM Turn: 0.0"
      - listitem: "E #4 Ethan 07:00 AM Turn: 0.0"
      - listitem: "S #5 Sam 07:00 AM Turn: 0.0"
      - listitem: "S #6 Sarah 07:00 AM Turn: 0.0"
      - listitem: "S #7 Sandy 07:00 AM Turn: 0.0"
      - listitem:
        - img "item service Emily"
        - text: "#8 Emily 07:00 AM Turn: 0.0"
      - listitem: "M #9 Maya 07:00 AM Turn: 0.0"
      - listitem: "K #10 Kim 07:00 AM Turn: 0.0"
      - listitem: "B #11 Bella 07:00 AM Turn: 0.0"
      - listitem: "R #12 Ruby 07:00 AM Turn: 0.0"
      - listitem:
        - img "item service Owner"
        - text: "#13 Owner 06:47 AM Turn: 0.0"
      - listitem: "H #14 Hanna 07:00 AM Turn: 0.0"
      - listitem: "D #15 Dylan 07:00 AM Turn: 0.0"
      - listitem: "K #16 Kelley 07:00 AM Turn: 0.0"
      - listitem:
        - img "item service Emma"
        - text: "#17 Emma 07:00 AM Turn: 0.0"
      - listitem: "J #18 Jack 07:00 AM Turn: 0.0"
      - listitem: "L #19 Laura 07:00 AM Turn: 0.0"
      - listitem: "T #20 Tim 07:00 AM Turn: 0.0"
      - listitem: "B #21 Brian 07:00 AM Turn: 0.0"
      - listitem: "T #22 Tina 07:00 AM Turn: 0.0"
      - listitem: "H #23 Harry 07:00 AM Turn: 1.0"
      - listitem: "S #24 Sophia 07:00 AM Turn: 1.0"
      - listitem: "A #25 Anna 07:00 AM Turn: 2.0"
  - button "search"
  - list:
    - listitem:
      - button "Ready"
    - listitem:
      - button "In Service"
    - listitem:
      - button "Paid"
    - listitem:
      - button "All" [disabled]
  - list:
    - listitem: "K #119 Kelley 06:49 AM - Now 0' Waiting $0.00"
- alert: "Ticket View #117 - xPOS Salon"
```

# Test source

```ts
  698 | 			.getByText(type);
  699 | 		await expect(discountTypeElement).toHaveText(type);
  700 | 	},
  701 | );
  702 |
  703 | When(
  704 | 	'I enter the discount amount {string}',
  705 | 	async ({ page }, amount: string) => {
  706 | 		await page.locator('input#priceAmount').fill(amount);
  707 | 	},
  708 | );
  709 |
  710 | Then(
  711 | 	'I should see the {string} discount in my cart',
  712 | 	async ({ page }, discount: string) => {
  713 | 		const discountElement = page
  714 | 			.locator('.xTicketItems__discount--title')
  715 | 			.getByText(discount);
  716 | 		await expect(discountElement).toContainText(discount);
  717 | 	},
  718 | );
  719 |
  720 | Then(
  721 | 	'I should see the {string} absorption type in my cart',
  722 | 	async ({ page }, type: string) => {
  723 | 		const typeElement = page
  724 | 			.locator('.xTicketItems__discount--title')
  725 | 			.getByText(type);
  726 | 		await expect(typeElement).toContainText(type);
  727 | 	},
  728 | );
  729 |
  730 | Then(
  731 | 	'I should see discount {string} in my cart',
  732 | 	async ({ page }, amount: string) => {
  733 | 		const amountDiscount = page
  734 | 			.locator('.xTicketItems__discount--price')
  735 | 			.getByText(amount);
  736 | 		await expect(amountDiscount).toContainText(amount);
  737 | 	},
  738 | );
  739 |
  740 | When(
  741 | 	'I enter the discount percent {string}',
  742 | 	async ({ page }, percent: string) => {
  743 | 		await page.locator('#pricePercent').fill(percent);
  744 | 	},
  745 | );
  746 |
  747 | Then('I should see the discount ticket non-zero', async ({ page }) => {
  748 | 	const discountTicket = page.locator('ul.xCharge li.MuiListItem-root').nth(1);
  749 |
  750 | 	await expect(discountTicket).not.toContainText('0.00');
  751 | 	await expect(discountTicket).not.toHaveText('$0.00');
  752 | });
  753 |
  754 | Then(
  755 | 	'I should see the {string} category',
  756 | 	async ({ page }, category: string) => {
  757 | 		const categoryElement = page
  758 | 			.locator('button.MuiButtonBase-root')
  759 | 			.getByText(category, { exact: true });
  760 | 		await expect(categoryElement).toHaveText(category);
  761 | 	},
  762 | );
  763 |
  764 | When('I select the {string} category', async ({ page }, category: string) => {
  765 | 	const categoryElement = page
  766 | 		.locator('button.MuiButtonBase-root')
  767 | 		.getByText(category, { exact: true });
  768 | 	await expect(categoryElement).toHaveText(category);
  769 | 	await categoryElement.click();
  770 | });
  771 |
  772 | Then(
  773 | 	'I should see the number card {string} visible',
  774 | 	async ({ page }, number: string) => {
  775 | 		const numberElement = page.locator('.numberCard').getByText(number);
  776 | 		await expect(numberElement).toHaveText(number);
  777 | 	},
  778 | );
  779 |
  780 | When('I remove the tax', async ({ page }) => {
  781 | 	const deleteTax = page.locator(
  782 | 		'button:has(svg[data-testid="XDeleteBoldIcon"])',
  783 | 	);
  784 |
  785 | 	await expect(deleteTax).toBeVisible();
  786 | 	await deleteTax.click();
  787 | });
  788 |
  789 | Then('I should see the tax display {string}', async ({ page }, tax: string) => {
  790 | 	const taxAmount = page.locator('.xCharge__taxes');
  791 | 	await expect(taxAmount).toHaveText(tax);
  792 | });
  793 |
  794 | When('I select the reason {string}', async ({ page }, reason: string) => {
  795 | 	const reasonElement = page
  796 | 		.locator('.xVoid')
  797 | 		.getByText(reason, { exact: true });
> 798 | 	await expect(reasonElement).toHaveText(reason);
      | 	                            ^ Error: Timed out 30000ms waiting for expect(locator).toHaveText(expected)
  799 | 	await reasonElement.click();
  800 | });
  801 |
  802 | Then(
  803 | 	'I should see a second popup dialog with title {string}',
  804 | 	async ({ page }, dialogTitle: string) => {
  805 | 		const dialogTitleElement = page.locator('.MuiDialogTitle-root').last();
  806 |
  807 | 		await expect(dialogTitleElement).toBeVisible();
  808 | 		await expect(dialogTitleElement).toHaveText(dialogTitle);
  809 | 	},
  810 | );
  811 |
  812 | When('I back to HOME page', async ({ page }) => {
  813 | 	await page.locator('.xHeader__top--left').click();
  814 | });
  815 |
  816 | Then(
  817 | 	'I should see the employee {string} in my cart',
  818 | 	async ({ page }, employee: string) => {
  819 | 		const employeeElement = page
  820 | 			.locator('.xTicketItems__wrap')
  821 | 			.getByText(employee);
  822 | 		await expect(employeeElement).toContainText(employee);
  823 | 	},
  824 | );
  825 |
  826 | When('I click on the header menu', async ({ page }) => {
  827 | 	await page.locator('.xHeader__menu').click();
  828 | });
  829 |
  830 | When(
  831 | 	'I select the {string} label in the menu list',
  832 | 	async ({ page }, label: string) => {
  833 | 		const labelElement = page.locator('ul.xMenu__link').getByText(label);
  834 | 		await expect(labelElement).toHaveText(label);
  835 | 		await labelElement.click();
  836 | 	},
  837 | );
  838 |
  839 | Then(
  840 | 	'I should see the employee {string} in the popup dialog',
  841 | 	async ({ page }, employee: string) => {
  842 | 		const employeeElement = page
  843 | 			.locator('.refund__content')
  844 | 			.getByText(employee);
  845 | 		await expect(employeeElement).toHaveText(employee);
  846 | 	},
  847 | );
  848 |
  849 | Then(
  850 | 	'I should see the {string} service with status wait',
  851 | 	async ({ page }, service: string) => {
  852 | 		const serviceWithWaitStatus = page
  853 | 			.locator('.xTicketItems__wrap', {
  854 | 				hasText: service,
  855 | 			})
  856 | 			.filter({ has: page.locator('.status:text("W")') });
  857 |
  858 | 		await expect(serviceWithWaitStatus).toBeVisible();
  859 | 	},
  860 | );
  861 |
  862 | Then(
  863 | 	'I should not see the service {string} in my cart',
  864 | 	async ({ page }, service: string) => {
  865 | 		const serviceElement = page
  866 | 			.locator('.xTicketItems__content')
  867 | 			.getByText(service, { exact: true });
  868 | 		await expect(serviceElement).toHaveCount(0);
  869 | 	},
  870 | );
  871 |
  872 | When(
  873 | 	'I click the status of {string} to change done',
  874 | 	async ({ page }, service: string) => {
  875 | 		const serviceContainer = page
  876 | 			.locator('.xTicketItems__wrap')
  877 | 			.filter({ hasText: service });
  878 |
  879 | 		const waitStatusElement = serviceContainer.locator('.status:text("W")');
  880 | 		await expect(waitStatusElement).toBeVisible();
  881 |
  882 | 		await waitStatusElement.click();
  883 | 	},
  884 | );
  885 |
  886 | Then(
  887 | 	'I should see the {string} service with status done',
  888 | 	async ({ page }, service: string) => {
  889 | 		const serviceWithWaitStatus = page
  890 | 			.locator('.xTicketItems__wrap', {
  891 | 				hasText: service,
  892 | 			})
  893 | 			.filter({ has: page.locator('.status.done:text("D")') });
  894 |
  895 | 		await expect(serviceWithWaitStatus).toBeVisible();
  896 | 	},
  897 | );
  898 |
```